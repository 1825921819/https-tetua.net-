// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/file"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/page"
)

// Page is the model entity for the Page schema.
type Page struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty" validate:"required"`
	// ContentHTML holds the value of the "content_html" field.
	ContentHTML string `json:"content_html,omitempty"`
	// Draft holds the value of the "draft" field.
	Draft bool `json:"draft,omitempty"`
	// FeaturedImageID holds the value of the "featured_image_id" field.
	FeaturedImageID int `json:"featured_image_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PageQuery when eager-loading is set.
	Edges PageEdges `json:"edges"`
}

// PageEdges holds the relations/edges for other nodes in the graph.
type PageEdges struct {
	// FeaturedImage holds the value of the featured_image edge.
	FeaturedImage *File `json:"featured_image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FeaturedImageOrErr returns the FeaturedImage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageEdges) FeaturedImageOrErr() (*File, error) {
	if e.loadedTypes[0] {
		if e.FeaturedImage == nil {
			// The edge featured_image was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: file.Label}
		}
		return e.FeaturedImage, nil
	}
	return nil, &NotLoadedError{edge: "featured_image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Page) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case page.FieldDraft:
			values[i] = new(sql.NullBool)
		case page.FieldID, page.FieldFeaturedImageID:
			values[i] = new(sql.NullInt64)
		case page.FieldName, page.FieldSlug, page.FieldContent, page.FieldContentHTML:
			values[i] = new(sql.NullString)
		case page.FieldCreatedAt, page.FieldUpdatedAt, page.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Page", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Page fields.
func (pa *Page) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case page.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case page.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case page.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case page.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pa.DeletedAt = value.Time
			}
		case page.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case page.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				pa.Slug = value.String
			}
		case page.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pa.Content = value.String
			}
		case page.FieldContentHTML:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_html", values[i])
			} else if value.Valid {
				pa.ContentHTML = value.String
			}
		case page.FieldDraft:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field draft", values[i])
			} else if value.Valid {
				pa.Draft = value.Bool
			}
		case page.FieldFeaturedImageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field featured_image_id", values[i])
			} else if value.Valid {
				pa.FeaturedImageID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryFeaturedImage queries the "featured_image" edge of the Page entity.
func (pa *Page) QueryFeaturedImage() *FileQuery {
	return (&PageClient{config: pa.config}).QueryFeaturedImage(pa)
}

// Update returns a builder for updating this Page.
// Note that you need to call Page.Unwrap() before calling this method if this Page
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Page) Update() *PageUpdateOne {
	return (&PageClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Page entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Page) Unwrap() *Page {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Page is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Page) String() string {
	var builder strings.Builder
	builder.WriteString("Page(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(pa.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", slug=")
	builder.WriteString(pa.Slug)
	builder.WriteString(", content=")
	builder.WriteString(pa.Content)
	builder.WriteString(", content_html=")
	builder.WriteString(pa.ContentHTML)
	builder.WriteString(", draft=")
	builder.WriteString(fmt.Sprintf("%v", pa.Draft))
	builder.WriteString(", featured_image_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.FeaturedImageID))
	builder.WriteByte(')')
	return builder.String()
}

// Pages is a parsable slice of Page.
type Pages []*Page

func (pa Pages) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
