// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/file"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/post"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/user"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty" validate:"max=255"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty" validate:"required"`
	// ContentHTML holds the value of the "content_html" field.
	ContentHTML string `json:"content_html,omitempty"`
	// ViewCount holds the value of the "view_count" field.
	ViewCount int64 `json:"view_count,omitempty"`
	// CommentCount holds the value of the "comment_count" field.
	CommentCount int64 `json:"comment_count,omitempty"`
	// RatingCount holds the value of the "rating_count" field.
	RatingCount int64 `json:"rating_count,omitempty"`
	// RatingTotal holds the value of the "rating_total" field.
	RatingTotal int64 `json:"rating_total,omitempty"`
	// Draft holds the value of the "draft" field.
	Draft bool `json:"draft,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
	// FeaturedImageID holds the value of the "featured_image_id" field.
	FeaturedImageID int `json:"featured_image_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges PostEdges `json:"edges"`
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Topics holds the value of the topics edge.
	Topics []*Topic `json:"topics,omitempty"`
	// FeaturedImage holds the value of the featured_image edge.
	FeaturedImage *File `json:"featured_image,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TopicsOrErr returns the Topics value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) TopicsOrErr() ([]*Topic, error) {
	if e.loadedTypes[1] {
		return e.Topics, nil
	}
	return nil, &NotLoadedError{edge: "topics"}
}

// FeaturedImageOrErr returns the FeaturedImage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) FeaturedImageOrErr() (*File, error) {
	if e.loadedTypes[2] {
		if e.FeaturedImage == nil {
			// The edge featured_image was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: file.Label}
		}
		return e.FeaturedImage, nil
	}
	return nil, &NotLoadedError{edge: "featured_image"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[3] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldDraft, post.FieldApproved:
			values[i] = new(sql.NullBool)
		case post.FieldID, post.FieldViewCount, post.FieldCommentCount, post.FieldRatingCount, post.FieldRatingTotal, post.FieldFeaturedImageID, post.FieldUserID:
			values[i] = new(sql.NullInt64)
		case post.FieldName, post.FieldSlug, post.FieldDescription, post.FieldContent, post.FieldContentHTML:
			values[i] = new(sql.NullString)
		case post.FieldCreatedAt, post.FieldUpdatedAt, post.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Post", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case post.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case post.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case post.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				po.DeletedAt = value.Time
			}
		case post.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				po.Name = value.String
			}
		case post.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				po.Slug = value.String
			}
		case post.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				po.Description = value.String
			}
		case post.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				po.Content = value.String
			}
		case post.FieldContentHTML:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_html", values[i])
			} else if value.Valid {
				po.ContentHTML = value.String
			}
		case post.FieldViewCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field view_count", values[i])
			} else if value.Valid {
				po.ViewCount = value.Int64
			}
		case post.FieldCommentCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_count", values[i])
			} else if value.Valid {
				po.CommentCount = value.Int64
			}
		case post.FieldRatingCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating_count", values[i])
			} else if value.Valid {
				po.RatingCount = value.Int64
			}
		case post.FieldRatingTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating_total", values[i])
			} else if value.Valid {
				po.RatingTotal = value.Int64
			}
		case post.FieldDraft:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field draft", values[i])
			} else if value.Valid {
				po.Draft = value.Bool
			}
		case post.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				po.Approved = value.Bool
			}
		case post.FieldFeaturedImageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field featured_image_id", values[i])
			} else if value.Valid {
				po.FeaturedImageID = int(value.Int64)
			}
		case post.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				po.UserID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Post entity.
func (po *Post) QueryUser() *UserQuery {
	return (&PostClient{config: po.config}).QueryUser(po)
}

// QueryTopics queries the "topics" edge of the Post entity.
func (po *Post) QueryTopics() *TopicQuery {
	return (&PostClient{config: po.config}).QueryTopics(po)
}

// QueryFeaturedImage queries the "featured_image" edge of the Post entity.
func (po *Post) QueryFeaturedImage() *FileQuery {
	return (&PostClient{config: po.config}).QueryFeaturedImage(po)
}

// QueryComments queries the "comments" edge of the Post entity.
func (po *Post) QueryComments() *CommentQuery {
	return (&PostClient{config: po.config}).QueryComments(po)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return (&PostClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(po.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(po.Name)
	builder.WriteString(", slug=")
	builder.WriteString(po.Slug)
	builder.WriteString(", description=")
	builder.WriteString(po.Description)
	builder.WriteString(", content=")
	builder.WriteString(po.Content)
	builder.WriteString(", content_html=")
	builder.WriteString(po.ContentHTML)
	builder.WriteString(", view_count=")
	builder.WriteString(fmt.Sprintf("%v", po.ViewCount))
	builder.WriteString(", comment_count=")
	builder.WriteString(fmt.Sprintf("%v", po.CommentCount))
	builder.WriteString(", rating_count=")
	builder.WriteString(fmt.Sprintf("%v", po.RatingCount))
	builder.WriteString(", rating_total=")
	builder.WriteString(fmt.Sprintf("%v", po.RatingTotal))
	builder.WriteString(", draft=")
	builder.WriteString(fmt.Sprintf("%v", po.Draft))
	builder.WriteString(", approved=")
	builder.WriteString(fmt.Sprintf("%v", po.Approved))
	builder.WriteString(", featured_image_id=")
	builder.WriteString(fmt.Sprintf("%v", po.FeaturedImageID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", po.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Posts is a parsable slice of Post.
type Posts []*Post

func (po Posts) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
