// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/comment"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/file"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/post"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/topic"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/user"
)

// PostCreate is the builder for creating a Post entity.
type PostCreate struct {
	config
	mutation *PostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PostCreate) SetCreatedAt(t time.Time) *PostCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PostCreate) SetNillableCreatedAt(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PostCreate) SetUpdatedAt(t time.Time) *PostCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PostCreate) SetNillableUpdatedAt(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PostCreate) SetDeletedAt(t time.Time) *PostCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PostCreate) SetNillableDeletedAt(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PostCreate) SetName(s string) *PostCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetSlug sets the "slug" field.
func (pc *PostCreate) SetSlug(s string) *PostCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PostCreate) SetDescription(s string) *PostCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PostCreate) SetNillableDescription(s *string) *PostCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetContent sets the "content" field.
func (pc *PostCreate) SetContent(s string) *PostCreate {
	pc.mutation.SetContent(s)
	return pc
}

// SetContentHTML sets the "content_html" field.
func (pc *PostCreate) SetContentHTML(s string) *PostCreate {
	pc.mutation.SetContentHTML(s)
	return pc
}

// SetViewCount sets the "view_count" field.
func (pc *PostCreate) SetViewCount(i int64) *PostCreate {
	pc.mutation.SetViewCount(i)
	return pc
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (pc *PostCreate) SetNillableViewCount(i *int64) *PostCreate {
	if i != nil {
		pc.SetViewCount(*i)
	}
	return pc
}

// SetCommentCount sets the "comment_count" field.
func (pc *PostCreate) SetCommentCount(i int64) *PostCreate {
	pc.mutation.SetCommentCount(i)
	return pc
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (pc *PostCreate) SetNillableCommentCount(i *int64) *PostCreate {
	if i != nil {
		pc.SetCommentCount(*i)
	}
	return pc
}

// SetRatingCount sets the "rating_count" field.
func (pc *PostCreate) SetRatingCount(i int64) *PostCreate {
	pc.mutation.SetRatingCount(i)
	return pc
}

// SetNillableRatingCount sets the "rating_count" field if the given value is not nil.
func (pc *PostCreate) SetNillableRatingCount(i *int64) *PostCreate {
	if i != nil {
		pc.SetRatingCount(*i)
	}
	return pc
}

// SetRatingTotal sets the "rating_total" field.
func (pc *PostCreate) SetRatingTotal(i int64) *PostCreate {
	pc.mutation.SetRatingTotal(i)
	return pc
}

// SetNillableRatingTotal sets the "rating_total" field if the given value is not nil.
func (pc *PostCreate) SetNillableRatingTotal(i *int64) *PostCreate {
	if i != nil {
		pc.SetRatingTotal(*i)
	}
	return pc
}

// SetDraft sets the "draft" field.
func (pc *PostCreate) SetDraft(b bool) *PostCreate {
	pc.mutation.SetDraft(b)
	return pc
}

// SetNillableDraft sets the "draft" field if the given value is not nil.
func (pc *PostCreate) SetNillableDraft(b *bool) *PostCreate {
	if b != nil {
		pc.SetDraft(*b)
	}
	return pc
}

// SetApproved sets the "approved" field.
func (pc *PostCreate) SetApproved(b bool) *PostCreate {
	pc.mutation.SetApproved(b)
	return pc
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (pc *PostCreate) SetNillableApproved(b *bool) *PostCreate {
	if b != nil {
		pc.SetApproved(*b)
	}
	return pc
}

// SetFeaturedImageID sets the "featured_image_id" field.
func (pc *PostCreate) SetFeaturedImageID(i int) *PostCreate {
	pc.mutation.SetFeaturedImageID(i)
	return pc
}

// SetNillableFeaturedImageID sets the "featured_image_id" field if the given value is not nil.
func (pc *PostCreate) SetNillableFeaturedImageID(i *int) *PostCreate {
	if i != nil {
		pc.SetFeaturedImageID(*i)
	}
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *PostCreate) SetUserID(i int) *PostCreate {
	pc.mutation.SetUserID(i)
	return pc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pc *PostCreate) SetNillableUserID(i *int) *PostCreate {
	if i != nil {
		pc.SetUserID(*i)
	}
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *PostCreate) SetUser(u *User) *PostCreate {
	return pc.SetUserID(u.ID)
}

// AddTopicIDs adds the "topics" edge to the Topic entity by IDs.
func (pc *PostCreate) AddTopicIDs(ids ...int) *PostCreate {
	pc.mutation.AddTopicIDs(ids...)
	return pc
}

// AddTopics adds the "topics" edges to the Topic entity.
func (pc *PostCreate) AddTopics(t ...*Topic) *PostCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTopicIDs(ids...)
}

// SetFeaturedImage sets the "featured_image" edge to the File entity.
func (pc *PostCreate) SetFeaturedImage(f *File) *PostCreate {
	return pc.SetFeaturedImageID(f.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (pc *PostCreate) AddCommentIDs(ids ...int) *PostCreate {
	pc.mutation.AddCommentIDs(ids...)
	return pc
}

// AddComments adds the "comments" edges to the Comment entity.
func (pc *PostCreate) AddComments(c ...*Comment) *PostCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCommentIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pc *PostCreate) Mutation() *PostMutation {
	return pc.mutation
}

// Save creates the Post in the database.
func (pc *PostCreate) Save(ctx context.Context) (*Post, error) {
	var (
		err  error
		node *Post
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PostCreate) SaveX(ctx context.Context) *Post {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PostCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PostCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PostCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := post.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := post.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ViewCount(); !ok {
		v := post.DefaultViewCount
		pc.mutation.SetViewCount(v)
	}
	if _, ok := pc.mutation.CommentCount(); !ok {
		v := post.DefaultCommentCount
		pc.mutation.SetCommentCount(v)
	}
	if _, ok := pc.mutation.RatingCount(); !ok {
		v := post.DefaultRatingCount
		pc.mutation.SetRatingCount(v)
	}
	if _, ok := pc.mutation.RatingTotal(); !ok {
		v := post.DefaultRatingTotal
		pc.mutation.SetRatingTotal(v)
	}
	if _, ok := pc.mutation.Draft(); !ok {
		v := post.DefaultDraft
		pc.mutation.SetDraft(v)
	}
	if _, ok := pc.mutation.Approved(); !ok {
		v := post.DefaultApproved
		pc.mutation.SetApproved(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PostCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Post.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Post.updated_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Post.name"`)}
	}
	if _, ok := pc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Post.slug"`)}
	}
	if _, ok := pc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Post.content"`)}
	}
	if _, ok := pc.mutation.ContentHTML(); !ok {
		return &ValidationError{Name: "content_html", err: errors.New(`ent: missing required field "Post.content_html"`)}
	}
	if _, ok := pc.mutation.ViewCount(); !ok {
		return &ValidationError{Name: "view_count", err: errors.New(`ent: missing required field "Post.view_count"`)}
	}
	if _, ok := pc.mutation.CommentCount(); !ok {
		return &ValidationError{Name: "comment_count", err: errors.New(`ent: missing required field "Post.comment_count"`)}
	}
	return nil
}

func (pc *PostCreate) sqlSave(ctx context.Context) (*Post, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PostCreate) createSpec() (*Post, *sqlgraph.CreateSpec) {
	var (
		_node = &Post{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: post.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldSlug,
		})
		_node.Slug = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := pc.mutation.ContentHTML(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldContentHTML,
		})
		_node.ContentHTML = value
	}
	if value, ok := pc.mutation.ViewCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldViewCount,
		})
		_node.ViewCount = value
	}
	if value, ok := pc.mutation.CommentCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldCommentCount,
		})
		_node.CommentCount = value
	}
	if value, ok := pc.mutation.RatingCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldRatingCount,
		})
		_node.RatingCount = value
	}
	if value, ok := pc.mutation.RatingTotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldRatingTotal,
		})
		_node.RatingTotal = value
	}
	if value, ok := pc.mutation.Draft(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldDraft,
		})
		_node.Draft = value
	}
	if value, ok := pc.mutation.Approved(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldApproved,
		})
		_node.Approved = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TopicsTable,
			Columns: post.TopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.FeaturedImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.FeaturedImageTable,
			Columns: []string{post.FeaturedImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeaturedImageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Post.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PostCreate) OnConflict(opts ...sql.ConflictOption) *PostUpsertOne {
	pc.conflict = opts
	return &PostUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PostCreate) OnConflictColumns(columns ...string) *PostUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PostUpsertOne{
		create: pc,
	}
}

type (
	// PostUpsertOne is the builder for "upsert"-ing
	//  one Post node.
	PostUpsertOne struct {
		create *PostCreate
	}

	// PostUpsert is the "OnConflict" setter.
	PostUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PostUpsert) SetCreatedAt(v time.Time) *PostUpsert {
	u.Set(post.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PostUpsert) UpdateCreatedAt() *PostUpsert {
	u.SetExcluded(post.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostUpsert) SetUpdatedAt(v time.Time) *PostUpsert {
	u.Set(post.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostUpsert) UpdateUpdatedAt() *PostUpsert {
	u.SetExcluded(post.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PostUpsert) SetDeletedAt(v time.Time) *PostUpsert {
	u.Set(post.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PostUpsert) UpdateDeletedAt() *PostUpsert {
	u.SetExcluded(post.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PostUpsert) ClearDeletedAt() *PostUpsert {
	u.SetNull(post.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *PostUpsert) SetName(v string) *PostUpsert {
	u.Set(post.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostUpsert) UpdateName() *PostUpsert {
	u.SetExcluded(post.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *PostUpsert) SetSlug(v string) *PostUpsert {
	u.Set(post.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsert) UpdateSlug() *PostUpsert {
	u.SetExcluded(post.FieldSlug)
	return u
}

// SetDescription sets the "description" field.
func (u *PostUpsert) SetDescription(v string) *PostUpsert {
	u.Set(post.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PostUpsert) UpdateDescription() *PostUpsert {
	u.SetExcluded(post.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PostUpsert) ClearDescription() *PostUpsert {
	u.SetNull(post.FieldDescription)
	return u
}

// SetContent sets the "content" field.
func (u *PostUpsert) SetContent(v string) *PostUpsert {
	u.Set(post.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PostUpsert) UpdateContent() *PostUpsert {
	u.SetExcluded(post.FieldContent)
	return u
}

// SetContentHTML sets the "content_html" field.
func (u *PostUpsert) SetContentHTML(v string) *PostUpsert {
	u.Set(post.FieldContentHTML, v)
	return u
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *PostUpsert) UpdateContentHTML() *PostUpsert {
	u.SetExcluded(post.FieldContentHTML)
	return u
}

// SetViewCount sets the "view_count" field.
func (u *PostUpsert) SetViewCount(v int64) *PostUpsert {
	u.Set(post.FieldViewCount, v)
	return u
}

// UpdateViewCount sets the "view_count" field to the value that was provided on create.
func (u *PostUpsert) UpdateViewCount() *PostUpsert {
	u.SetExcluded(post.FieldViewCount)
	return u
}

// AddViewCount adds v to the "view_count" field.
func (u *PostUpsert) AddViewCount(v int64) *PostUpsert {
	u.Add(post.FieldViewCount, v)
	return u
}

// SetCommentCount sets the "comment_count" field.
func (u *PostUpsert) SetCommentCount(v int64) *PostUpsert {
	u.Set(post.FieldCommentCount, v)
	return u
}

// UpdateCommentCount sets the "comment_count" field to the value that was provided on create.
func (u *PostUpsert) UpdateCommentCount() *PostUpsert {
	u.SetExcluded(post.FieldCommentCount)
	return u
}

// AddCommentCount adds v to the "comment_count" field.
func (u *PostUpsert) AddCommentCount(v int64) *PostUpsert {
	u.Add(post.FieldCommentCount, v)
	return u
}

// SetRatingCount sets the "rating_count" field.
func (u *PostUpsert) SetRatingCount(v int64) *PostUpsert {
	u.Set(post.FieldRatingCount, v)
	return u
}

// UpdateRatingCount sets the "rating_count" field to the value that was provided on create.
func (u *PostUpsert) UpdateRatingCount() *PostUpsert {
	u.SetExcluded(post.FieldRatingCount)
	return u
}

// AddRatingCount adds v to the "rating_count" field.
func (u *PostUpsert) AddRatingCount(v int64) *PostUpsert {
	u.Add(post.FieldRatingCount, v)
	return u
}

// ClearRatingCount clears the value of the "rating_count" field.
func (u *PostUpsert) ClearRatingCount() *PostUpsert {
	u.SetNull(post.FieldRatingCount)
	return u
}

// SetRatingTotal sets the "rating_total" field.
func (u *PostUpsert) SetRatingTotal(v int64) *PostUpsert {
	u.Set(post.FieldRatingTotal, v)
	return u
}

// UpdateRatingTotal sets the "rating_total" field to the value that was provided on create.
func (u *PostUpsert) UpdateRatingTotal() *PostUpsert {
	u.SetExcluded(post.FieldRatingTotal)
	return u
}

// AddRatingTotal adds v to the "rating_total" field.
func (u *PostUpsert) AddRatingTotal(v int64) *PostUpsert {
	u.Add(post.FieldRatingTotal, v)
	return u
}

// ClearRatingTotal clears the value of the "rating_total" field.
func (u *PostUpsert) ClearRatingTotal() *PostUpsert {
	u.SetNull(post.FieldRatingTotal)
	return u
}

// SetDraft sets the "draft" field.
func (u *PostUpsert) SetDraft(v bool) *PostUpsert {
	u.Set(post.FieldDraft, v)
	return u
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *PostUpsert) UpdateDraft() *PostUpsert {
	u.SetExcluded(post.FieldDraft)
	return u
}

// ClearDraft clears the value of the "draft" field.
func (u *PostUpsert) ClearDraft() *PostUpsert {
	u.SetNull(post.FieldDraft)
	return u
}

// SetApproved sets the "approved" field.
func (u *PostUpsert) SetApproved(v bool) *PostUpsert {
	u.Set(post.FieldApproved, v)
	return u
}

// UpdateApproved sets the "approved" field to the value that was provided on create.
func (u *PostUpsert) UpdateApproved() *PostUpsert {
	u.SetExcluded(post.FieldApproved)
	return u
}

// ClearApproved clears the value of the "approved" field.
func (u *PostUpsert) ClearApproved() *PostUpsert {
	u.SetNull(post.FieldApproved)
	return u
}

// SetFeaturedImageID sets the "featured_image_id" field.
func (u *PostUpsert) SetFeaturedImageID(v int) *PostUpsert {
	u.Set(post.FieldFeaturedImageID, v)
	return u
}

// UpdateFeaturedImageID sets the "featured_image_id" field to the value that was provided on create.
func (u *PostUpsert) UpdateFeaturedImageID() *PostUpsert {
	u.SetExcluded(post.FieldFeaturedImageID)
	return u
}

// ClearFeaturedImageID clears the value of the "featured_image_id" field.
func (u *PostUpsert) ClearFeaturedImageID() *PostUpsert {
	u.SetNull(post.FieldFeaturedImageID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *PostUpsert) SetUserID(v int) *PostUpsert {
	u.Set(post.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PostUpsert) UpdateUserID() *PostUpsert {
	u.SetExcluded(post.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *PostUpsert) ClearUserID() *PostUpsert {
	u.SetNull(post.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PostUpsertOne) UpdateNewValues() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(post.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Post.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PostUpsertOne) Ignore() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostUpsertOne) DoNothing() *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostCreate.OnConflict
// documentation for more info.
func (u *PostUpsertOne) Update(set func(*PostUpsert)) *PostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PostUpsertOne) SetCreatedAt(v time.Time) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateCreatedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostUpsertOne) SetUpdatedAt(v time.Time) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateUpdatedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PostUpsertOne) SetDeletedAt(v time.Time) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateDeletedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PostUpsertOne) ClearDeletedAt() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *PostUpsertOne) SetName(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateName() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *PostUpsertOne) SetSlug(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateSlug() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateSlug()
	})
}

// SetDescription sets the "description" field.
func (u *PostUpsertOne) SetDescription(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateDescription() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PostUpsertOne) ClearDescription() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearDescription()
	})
}

// SetContent sets the "content" field.
func (u *PostUpsertOne) SetContent(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateContent() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateContent()
	})
}

// SetContentHTML sets the "content_html" field.
func (u *PostUpsertOne) SetContentHTML(v string) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetContentHTML(v)
	})
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateContentHTML() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateContentHTML()
	})
}

// SetViewCount sets the "view_count" field.
func (u *PostUpsertOne) SetViewCount(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetViewCount(v)
	})
}

// AddViewCount adds v to the "view_count" field.
func (u *PostUpsertOne) AddViewCount(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddViewCount(v)
	})
}

// UpdateViewCount sets the "view_count" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateViewCount() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateViewCount()
	})
}

// SetCommentCount sets the "comment_count" field.
func (u *PostUpsertOne) SetCommentCount(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetCommentCount(v)
	})
}

// AddCommentCount adds v to the "comment_count" field.
func (u *PostUpsertOne) AddCommentCount(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddCommentCount(v)
	})
}

// UpdateCommentCount sets the "comment_count" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateCommentCount() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCommentCount()
	})
}

// SetRatingCount sets the "rating_count" field.
func (u *PostUpsertOne) SetRatingCount(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetRatingCount(v)
	})
}

// AddRatingCount adds v to the "rating_count" field.
func (u *PostUpsertOne) AddRatingCount(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddRatingCount(v)
	})
}

// UpdateRatingCount sets the "rating_count" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateRatingCount() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateRatingCount()
	})
}

// ClearRatingCount clears the value of the "rating_count" field.
func (u *PostUpsertOne) ClearRatingCount() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearRatingCount()
	})
}

// SetRatingTotal sets the "rating_total" field.
func (u *PostUpsertOne) SetRatingTotal(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetRatingTotal(v)
	})
}

// AddRatingTotal adds v to the "rating_total" field.
func (u *PostUpsertOne) AddRatingTotal(v int64) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.AddRatingTotal(v)
	})
}

// UpdateRatingTotal sets the "rating_total" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateRatingTotal() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateRatingTotal()
	})
}

// ClearRatingTotal clears the value of the "rating_total" field.
func (u *PostUpsertOne) ClearRatingTotal() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearRatingTotal()
	})
}

// SetDraft sets the "draft" field.
func (u *PostUpsertOne) SetDraft(v bool) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetDraft(v)
	})
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateDraft() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDraft()
	})
}

// ClearDraft clears the value of the "draft" field.
func (u *PostUpsertOne) ClearDraft() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearDraft()
	})
}

// SetApproved sets the "approved" field.
func (u *PostUpsertOne) SetApproved(v bool) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetApproved(v)
	})
}

// UpdateApproved sets the "approved" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateApproved() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateApproved()
	})
}

// ClearApproved clears the value of the "approved" field.
func (u *PostUpsertOne) ClearApproved() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearApproved()
	})
}

// SetFeaturedImageID sets the "featured_image_id" field.
func (u *PostUpsertOne) SetFeaturedImageID(v int) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetFeaturedImageID(v)
	})
}

// UpdateFeaturedImageID sets the "featured_image_id" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateFeaturedImageID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateFeaturedImageID()
	})
}

// ClearFeaturedImageID clears the value of the "featured_image_id" field.
func (u *PostUpsertOne) ClearFeaturedImageID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearFeaturedImageID()
	})
}

// SetUserID sets the "user_id" field.
func (u *PostUpsertOne) SetUserID(v int) *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PostUpsertOne) UpdateUserID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *PostUpsertOne) ClearUserID() *PostUpsertOne {
	return u.Update(func(s *PostUpsert) {
		s.ClearUserID()
	})
}

// Exec executes the query.
func (u *PostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PostUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PostUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PostCreateBulk is the builder for creating many Post entities in bulk.
type PostCreateBulk struct {
	config
	builders []*PostCreate
	conflict []sql.ConflictOption
}

// Save creates the Post entities in the database.
func (pcb *PostCreateBulk) Save(ctx context.Context) ([]*Post, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Post, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PostCreateBulk) SaveX(ctx context.Context) []*Post {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PostCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PostCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Post.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PostCreateBulk) OnConflict(opts ...sql.ConflictOption) *PostUpsertBulk {
	pcb.conflict = opts
	return &PostUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PostCreateBulk) OnConflictColumns(columns ...string) *PostUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PostUpsertBulk{
		create: pcb,
	}
}

// PostUpsertBulk is the builder for "upsert"-ing
// a bulk of Post nodes.
type PostUpsertBulk struct {
	create *PostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PostUpsertBulk) UpdateNewValues() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(post.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Post.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PostUpsertBulk) Ignore() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostUpsertBulk) DoNothing() *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostCreateBulk.OnConflict
// documentation for more info.
func (u *PostUpsertBulk) Update(set func(*PostUpsert)) *PostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PostUpsertBulk) SetCreatedAt(v time.Time) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateCreatedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostUpsertBulk) SetUpdatedAt(v time.Time) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateUpdatedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PostUpsertBulk) SetDeletedAt(v time.Time) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateDeletedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PostUpsertBulk) ClearDeletedAt() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *PostUpsertBulk) SetName(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateName() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *PostUpsertBulk) SetSlug(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateSlug() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateSlug()
	})
}

// SetDescription sets the "description" field.
func (u *PostUpsertBulk) SetDescription(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateDescription() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PostUpsertBulk) ClearDescription() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearDescription()
	})
}

// SetContent sets the "content" field.
func (u *PostUpsertBulk) SetContent(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateContent() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateContent()
	})
}

// SetContentHTML sets the "content_html" field.
func (u *PostUpsertBulk) SetContentHTML(v string) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetContentHTML(v)
	})
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateContentHTML() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateContentHTML()
	})
}

// SetViewCount sets the "view_count" field.
func (u *PostUpsertBulk) SetViewCount(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetViewCount(v)
	})
}

// AddViewCount adds v to the "view_count" field.
func (u *PostUpsertBulk) AddViewCount(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddViewCount(v)
	})
}

// UpdateViewCount sets the "view_count" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateViewCount() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateViewCount()
	})
}

// SetCommentCount sets the "comment_count" field.
func (u *PostUpsertBulk) SetCommentCount(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetCommentCount(v)
	})
}

// AddCommentCount adds v to the "comment_count" field.
func (u *PostUpsertBulk) AddCommentCount(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddCommentCount(v)
	})
}

// UpdateCommentCount sets the "comment_count" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateCommentCount() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateCommentCount()
	})
}

// SetRatingCount sets the "rating_count" field.
func (u *PostUpsertBulk) SetRatingCount(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetRatingCount(v)
	})
}

// AddRatingCount adds v to the "rating_count" field.
func (u *PostUpsertBulk) AddRatingCount(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddRatingCount(v)
	})
}

// UpdateRatingCount sets the "rating_count" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateRatingCount() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateRatingCount()
	})
}

// ClearRatingCount clears the value of the "rating_count" field.
func (u *PostUpsertBulk) ClearRatingCount() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearRatingCount()
	})
}

// SetRatingTotal sets the "rating_total" field.
func (u *PostUpsertBulk) SetRatingTotal(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetRatingTotal(v)
	})
}

// AddRatingTotal adds v to the "rating_total" field.
func (u *PostUpsertBulk) AddRatingTotal(v int64) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.AddRatingTotal(v)
	})
}

// UpdateRatingTotal sets the "rating_total" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateRatingTotal() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateRatingTotal()
	})
}

// ClearRatingTotal clears the value of the "rating_total" field.
func (u *PostUpsertBulk) ClearRatingTotal() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearRatingTotal()
	})
}

// SetDraft sets the "draft" field.
func (u *PostUpsertBulk) SetDraft(v bool) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetDraft(v)
	})
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateDraft() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateDraft()
	})
}

// ClearDraft clears the value of the "draft" field.
func (u *PostUpsertBulk) ClearDraft() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearDraft()
	})
}

// SetApproved sets the "approved" field.
func (u *PostUpsertBulk) SetApproved(v bool) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetApproved(v)
	})
}

// UpdateApproved sets the "approved" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateApproved() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateApproved()
	})
}

// ClearApproved clears the value of the "approved" field.
func (u *PostUpsertBulk) ClearApproved() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearApproved()
	})
}

// SetFeaturedImageID sets the "featured_image_id" field.
func (u *PostUpsertBulk) SetFeaturedImageID(v int) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetFeaturedImageID(v)
	})
}

// UpdateFeaturedImageID sets the "featured_image_id" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateFeaturedImageID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateFeaturedImageID()
	})
}

// ClearFeaturedImageID clears the value of the "featured_image_id" field.
func (u *PostUpsertBulk) ClearFeaturedImageID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearFeaturedImageID()
	})
}

// SetUserID sets the "user_id" field.
func (u *PostUpsertBulk) SetUserID(v int) *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PostUpsertBulk) UpdateUserID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *PostUpsertBulk) ClearUserID() *PostUpsertBulk {
	return u.Update(func(s *PostUpsert) {
		s.ClearUserID()
	})
}

// Exec executes the query.
func (u *PostUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
