// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/file"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/page"
)

// PageCreate is the builder for creating a Page entity.
type PageCreate struct {
	config
	mutation *PageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PageCreate) SetCreatedAt(t time.Time) *PageCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PageCreate) SetNillableCreatedAt(t *time.Time) *PageCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PageCreate) SetUpdatedAt(t time.Time) *PageCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PageCreate) SetNillableUpdatedAt(t *time.Time) *PageCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PageCreate) SetDeletedAt(t time.Time) *PageCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PageCreate) SetNillableDeletedAt(t *time.Time) *PageCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PageCreate) SetName(s string) *PageCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetSlug sets the "slug" field.
func (pc *PageCreate) SetSlug(s string) *PageCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetContent sets the "content" field.
func (pc *PageCreate) SetContent(s string) *PageCreate {
	pc.mutation.SetContent(s)
	return pc
}

// SetContentHTML sets the "content_html" field.
func (pc *PageCreate) SetContentHTML(s string) *PageCreate {
	pc.mutation.SetContentHTML(s)
	return pc
}

// SetDraft sets the "draft" field.
func (pc *PageCreate) SetDraft(b bool) *PageCreate {
	pc.mutation.SetDraft(b)
	return pc
}

// SetNillableDraft sets the "draft" field if the given value is not nil.
func (pc *PageCreate) SetNillableDraft(b *bool) *PageCreate {
	if b != nil {
		pc.SetDraft(*b)
	}
	return pc
}

// SetFeaturedImageID sets the "featured_image_id" field.
func (pc *PageCreate) SetFeaturedImageID(i int) *PageCreate {
	pc.mutation.SetFeaturedImageID(i)
	return pc
}

// SetNillableFeaturedImageID sets the "featured_image_id" field if the given value is not nil.
func (pc *PageCreate) SetNillableFeaturedImageID(i *int) *PageCreate {
	if i != nil {
		pc.SetFeaturedImageID(*i)
	}
	return pc
}

// SetFeaturedImage sets the "featured_image" edge to the File entity.
func (pc *PageCreate) SetFeaturedImage(f *File) *PageCreate {
	return pc.SetFeaturedImageID(f.ID)
}

// Mutation returns the PageMutation object of the builder.
func (pc *PageCreate) Mutation() *PageMutation {
	return pc.mutation
}

// Save creates the Page in the database.
func (pc *PageCreate) Save(ctx context.Context) (*Page, error) {
	var (
		err  error
		node *Page
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PageCreate) SaveX(ctx context.Context) *Page {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PageCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PageCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PageCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := page.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := page.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Draft(); !ok {
		v := page.DefaultDraft
		pc.mutation.SetDraft(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PageCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Page.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Page.updated_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Page.name"`)}
	}
	if _, ok := pc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Page.slug"`)}
	}
	if _, ok := pc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Page.content"`)}
	}
	if _, ok := pc.mutation.ContentHTML(); !ok {
		return &ValidationError{Name: "content_html", err: errors.New(`ent: missing required field "Page.content_html"`)}
	}
	return nil
}

func (pc *PageCreate) sqlSave(ctx context.Context) (*Page, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PageCreate) createSpec() (*Page, *sqlgraph.CreateSpec) {
	var (
		_node = &Page{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: page.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: page.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: page.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: page.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: page.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldSlug,
		})
		_node.Slug = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := pc.mutation.ContentHTML(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldContentHTML,
		})
		_node.ContentHTML = value
	}
	if value, ok := pc.mutation.Draft(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: page.FieldDraft,
		})
		_node.Draft = value
	}
	if nodes := pc.mutation.FeaturedImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   page.FeaturedImageTable,
			Columns: []string{page.FeaturedImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeaturedImageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Page.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PageCreate) OnConflict(opts ...sql.ConflictOption) *PageUpsertOne {
	pc.conflict = opts
	return &PageUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PageCreate) OnConflictColumns(columns ...string) *PageUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PageUpsertOne{
		create: pc,
	}
}

type (
	// PageUpsertOne is the builder for "upsert"-ing
	//  one Page node.
	PageUpsertOne struct {
		create *PageCreate
	}

	// PageUpsert is the "OnConflict" setter.
	PageUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PageUpsert) SetCreatedAt(v time.Time) *PageUpsert {
	u.Set(page.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PageUpsert) UpdateCreatedAt() *PageUpsert {
	u.SetExcluded(page.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageUpsert) SetUpdatedAt(v time.Time) *PageUpsert {
	u.Set(page.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageUpsert) UpdateUpdatedAt() *PageUpsert {
	u.SetExcluded(page.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PageUpsert) SetDeletedAt(v time.Time) *PageUpsert {
	u.Set(page.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PageUpsert) UpdateDeletedAt() *PageUpsert {
	u.SetExcluded(page.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PageUpsert) ClearDeletedAt() *PageUpsert {
	u.SetNull(page.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *PageUpsert) SetName(v string) *PageUpsert {
	u.Set(page.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PageUpsert) UpdateName() *PageUpsert {
	u.SetExcluded(page.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *PageUpsert) SetSlug(v string) *PageUpsert {
	u.Set(page.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PageUpsert) UpdateSlug() *PageUpsert {
	u.SetExcluded(page.FieldSlug)
	return u
}

// SetContent sets the "content" field.
func (u *PageUpsert) SetContent(v string) *PageUpsert {
	u.Set(page.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PageUpsert) UpdateContent() *PageUpsert {
	u.SetExcluded(page.FieldContent)
	return u
}

// SetContentHTML sets the "content_html" field.
func (u *PageUpsert) SetContentHTML(v string) *PageUpsert {
	u.Set(page.FieldContentHTML, v)
	return u
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *PageUpsert) UpdateContentHTML() *PageUpsert {
	u.SetExcluded(page.FieldContentHTML)
	return u
}

// SetDraft sets the "draft" field.
func (u *PageUpsert) SetDraft(v bool) *PageUpsert {
	u.Set(page.FieldDraft, v)
	return u
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *PageUpsert) UpdateDraft() *PageUpsert {
	u.SetExcluded(page.FieldDraft)
	return u
}

// ClearDraft clears the value of the "draft" field.
func (u *PageUpsert) ClearDraft() *PageUpsert {
	u.SetNull(page.FieldDraft)
	return u
}

// SetFeaturedImageID sets the "featured_image_id" field.
func (u *PageUpsert) SetFeaturedImageID(v int) *PageUpsert {
	u.Set(page.FieldFeaturedImageID, v)
	return u
}

// UpdateFeaturedImageID sets the "featured_image_id" field to the value that was provided on create.
func (u *PageUpsert) UpdateFeaturedImageID() *PageUpsert {
	u.SetExcluded(page.FieldFeaturedImageID)
	return u
}

// ClearFeaturedImageID clears the value of the "featured_image_id" field.
func (u *PageUpsert) ClearFeaturedImageID() *PageUpsert {
	u.SetNull(page.FieldFeaturedImageID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PageUpsertOne) UpdateNewValues() *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(page.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Page.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PageUpsertOne) Ignore() *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageUpsertOne) DoNothing() *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageCreate.OnConflict
// documentation for more info.
func (u *PageUpsertOne) Update(set func(*PageUpsert)) *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PageUpsertOne) SetCreatedAt(v time.Time) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateCreatedAt() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageUpsertOne) SetUpdatedAt(v time.Time) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateUpdatedAt() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PageUpsertOne) SetDeletedAt(v time.Time) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateDeletedAt() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PageUpsertOne) ClearDeletedAt() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *PageUpsertOne) SetName(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateName() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *PageUpsertOne) SetSlug(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateSlug() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateSlug()
	})
}

// SetContent sets the "content" field.
func (u *PageUpsertOne) SetContent(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateContent() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateContent()
	})
}

// SetContentHTML sets the "content_html" field.
func (u *PageUpsertOne) SetContentHTML(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetContentHTML(v)
	})
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateContentHTML() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateContentHTML()
	})
}

// SetDraft sets the "draft" field.
func (u *PageUpsertOne) SetDraft(v bool) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetDraft(v)
	})
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateDraft() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateDraft()
	})
}

// ClearDraft clears the value of the "draft" field.
func (u *PageUpsertOne) ClearDraft() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.ClearDraft()
	})
}

// SetFeaturedImageID sets the "featured_image_id" field.
func (u *PageUpsertOne) SetFeaturedImageID(v int) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetFeaturedImageID(v)
	})
}

// UpdateFeaturedImageID sets the "featured_image_id" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateFeaturedImageID() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateFeaturedImageID()
	})
}

// ClearFeaturedImageID clears the value of the "featured_image_id" field.
func (u *PageUpsertOne) ClearFeaturedImageID() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.ClearFeaturedImageID()
	})
}

// Exec executes the query.
func (u *PageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PageUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PageUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PageCreateBulk is the builder for creating many Page entities in bulk.
type PageCreateBulk struct {
	config
	builders []*PageCreate
	conflict []sql.ConflictOption
}

// Save creates the Page entities in the database.
func (pcb *PageCreateBulk) Save(ctx context.Context) ([]*Page, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Page, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PageCreateBulk) SaveX(ctx context.Context) []*Page {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PageCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PageCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Page.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PageCreateBulk) OnConflict(opts ...sql.ConflictOption) *PageUpsertBulk {
	pcb.conflict = opts
	return &PageUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PageCreateBulk) OnConflictColumns(columns ...string) *PageUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PageUpsertBulk{
		create: pcb,
	}
}

// PageUpsertBulk is the builder for "upsert"-ing
// a bulk of Page nodes.
type PageUpsertBulk struct {
	create *PageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PageUpsertBulk) UpdateNewValues() *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(page.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PageUpsertBulk) Ignore() *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageUpsertBulk) DoNothing() *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageCreateBulk.OnConflict
// documentation for more info.
func (u *PageUpsertBulk) Update(set func(*PageUpsert)) *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PageUpsertBulk) SetCreatedAt(v time.Time) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateCreatedAt() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageUpsertBulk) SetUpdatedAt(v time.Time) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateUpdatedAt() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PageUpsertBulk) SetDeletedAt(v time.Time) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateDeletedAt() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PageUpsertBulk) ClearDeletedAt() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *PageUpsertBulk) SetName(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateName() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *PageUpsertBulk) SetSlug(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateSlug() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateSlug()
	})
}

// SetContent sets the "content" field.
func (u *PageUpsertBulk) SetContent(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateContent() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateContent()
	})
}

// SetContentHTML sets the "content_html" field.
func (u *PageUpsertBulk) SetContentHTML(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetContentHTML(v)
	})
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateContentHTML() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateContentHTML()
	})
}

// SetDraft sets the "draft" field.
func (u *PageUpsertBulk) SetDraft(v bool) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetDraft(v)
	})
}

// UpdateDraft sets the "draft" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateDraft() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateDraft()
	})
}

// ClearDraft clears the value of the "draft" field.
func (u *PageUpsertBulk) ClearDraft() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.ClearDraft()
	})
}

// SetFeaturedImageID sets the "featured_image_id" field.
func (u *PageUpsertBulk) SetFeaturedImageID(v int) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetFeaturedImageID(v)
	})
}

// UpdateFeaturedImageID sets the "featured_image_id" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateFeaturedImageID() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateFeaturedImageID()
	})
}

// ClearFeaturedImageID clears the value of the "featured_image_id" field.
func (u *PageUpsertBulk) ClearFeaturedImageID() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.ClearFeaturedImageID()
	})
}

// Exec executes the query.
func (u *PageUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
