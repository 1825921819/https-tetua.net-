// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/comment"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/post"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/user"
)

// CommentCreate is the builder for creating a Comment entity.
type CommentCreate struct {
	config
	mutation *CommentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CommentCreate) SetCreatedAt(t time.Time) *CommentCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableCreatedAt(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CommentCreate) SetUpdatedAt(t time.Time) *CommentCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUpdatedAt(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CommentCreate) SetDeletedAt(t time.Time) *CommentCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableDeletedAt(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetContent sets the "content" field.
func (cc *CommentCreate) SetContent(s string) *CommentCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetContentHTML sets the "content_html" field.
func (cc *CommentCreate) SetContentHTML(s string) *CommentCreate {
	cc.mutation.SetContentHTML(s)
	return cc
}

// SetVotes sets the "votes" field.
func (cc *CommentCreate) SetVotes(i int64) *CommentCreate {
	cc.mutation.SetVotes(i)
	return cc
}

// SetNillableVotes sets the "votes" field if the given value is not nil.
func (cc *CommentCreate) SetNillableVotes(i *int64) *CommentCreate {
	if i != nil {
		cc.SetVotes(*i)
	}
	return cc
}

// SetPostID sets the "post_id" field.
func (cc *CommentCreate) SetPostID(i int) *CommentCreate {
	cc.mutation.SetPostID(i)
	return cc
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillablePostID(i *int) *CommentCreate {
	if i != nil {
		cc.SetPostID(*i)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CommentCreate) SetUserID(i int) *CommentCreate {
	cc.mutation.SetUserID(i)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUserID(i *int) *CommentCreate {
	if i != nil {
		cc.SetUserID(*i)
	}
	return cc
}

// SetParentID sets the "parent_id" field.
func (cc *CommentCreate) SetParentID(i int) *CommentCreate {
	cc.mutation.SetParentID(i)
	return cc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableParentID(i *int) *CommentCreate {
	if i != nil {
		cc.SetParentID(*i)
	}
	return cc
}

// SetPost sets the "post" edge to the Post entity.
func (cc *CommentCreate) SetPost(p *Post) *CommentCreate {
	return cc.SetPostID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cc *CommentCreate) SetUser(u *User) *CommentCreate {
	return cc.SetUserID(u.ID)
}

// AddChildIDs adds the "children" edge to the Comment entity by IDs.
func (cc *CommentCreate) AddChildIDs(ids ...int) *CommentCreate {
	cc.mutation.AddChildIDs(ids...)
	return cc
}

// AddChildren adds the "children" edges to the Comment entity.
func (cc *CommentCreate) AddChildren(c ...*Comment) *CommentCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Comment entity.
func (cc *CommentCreate) SetParent(c *Comment) *CommentCreate {
	return cc.SetParentID(c.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (cc *CommentCreate) Mutation() *CommentMutation {
	return cc.mutation
}

// Save creates the Comment in the database.
func (cc *CommentCreate) Save(ctx context.Context) (*Comment, error) {
	var (
		err  error
		node *Comment
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommentCreate) SaveX(ctx context.Context) *Comment {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommentCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := comment.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := comment.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Votes(); !ok {
		v := comment.DefaultVotes
		cc.mutation.SetVotes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommentCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Comment.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Comment.updated_at"`)}
	}
	if _, ok := cc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Comment.content"`)}
	}
	if _, ok := cc.mutation.ContentHTML(); !ok {
		return &ValidationError{Name: "content_html", err: errors.New(`ent: missing required field "Comment.content_html"`)}
	}
	if _, ok := cc.mutation.Votes(); !ok {
		return &ValidationError{Name: "votes", err: errors.New(`ent: missing required field "Comment.votes"`)}
	}
	return nil
}

func (cc *CommentCreate) sqlSave(ctx context.Context) (*Comment, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CommentCreate) createSpec() (*Comment, *sqlgraph.CreateSpec) {
	var (
		_node = &Comment{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: comment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: comment.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: comment.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: comment.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: comment.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: comment.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := cc.mutation.ContentHTML(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: comment.FieldContentHTML,
		})
		_node.ContentHTML = value
	}
	if value, ok := cc.mutation.Votes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: comment.FieldVotes,
		})
		_node.Votes = value
	}
	if nodes := cc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: []string{comment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ChildrenTable,
			Columns: []string{comment.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cc *CommentCreate) OnConflict(opts ...sql.ConflictOption) *CommentUpsertOne {
	cc.conflict = opts
	return &CommentUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cc *CommentCreate) OnConflictColumns(columns ...string) *CommentUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertOne{
		create: cc,
	}
}

type (
	// CommentUpsertOne is the builder for "upsert"-ing
	//  one Comment node.
	CommentUpsertOne struct {
		create *CommentCreate
	}

	// CommentUpsert is the "OnConflict" setter.
	CommentUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CommentUpsert) SetCreatedAt(v time.Time) *CommentUpsert {
	u.Set(comment.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommentUpsert) UpdateCreatedAt() *CommentUpsert {
	u.SetExcluded(comment.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsert) SetUpdatedAt(v time.Time) *CommentUpsert {
	u.Set(comment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUpdatedAt() *CommentUpsert {
	u.SetExcluded(comment.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsert) SetDeletedAt(v time.Time) *CommentUpsert {
	u.Set(comment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsert) UpdateDeletedAt() *CommentUpsert {
	u.SetExcluded(comment.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommentUpsert) ClearDeletedAt() *CommentUpsert {
	u.SetNull(comment.FieldDeletedAt)
	return u
}

// SetContent sets the "content" field.
func (u *CommentUpsert) SetContent(v string) *CommentUpsert {
	u.Set(comment.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsert) UpdateContent() *CommentUpsert {
	u.SetExcluded(comment.FieldContent)
	return u
}

// SetContentHTML sets the "content_html" field.
func (u *CommentUpsert) SetContentHTML(v string) *CommentUpsert {
	u.Set(comment.FieldContentHTML, v)
	return u
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *CommentUpsert) UpdateContentHTML() *CommentUpsert {
	u.SetExcluded(comment.FieldContentHTML)
	return u
}

// SetVotes sets the "votes" field.
func (u *CommentUpsert) SetVotes(v int64) *CommentUpsert {
	u.Set(comment.FieldVotes, v)
	return u
}

// UpdateVotes sets the "votes" field to the value that was provided on create.
func (u *CommentUpsert) UpdateVotes() *CommentUpsert {
	u.SetExcluded(comment.FieldVotes)
	return u
}

// AddVotes adds v to the "votes" field.
func (u *CommentUpsert) AddVotes(v int64) *CommentUpsert {
	u.Add(comment.FieldVotes, v)
	return u
}

// SetPostID sets the "post_id" field.
func (u *CommentUpsert) SetPostID(v int) *CommentUpsert {
	u.Set(comment.FieldPostID, v)
	return u
}

// UpdatePostID sets the "post_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdatePostID() *CommentUpsert {
	u.SetExcluded(comment.FieldPostID)
	return u
}

// ClearPostID clears the value of the "post_id" field.
func (u *CommentUpsert) ClearPostID() *CommentUpsert {
	u.SetNull(comment.FieldPostID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CommentUpsert) SetUserID(v int) *CommentUpsert {
	u.Set(comment.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUserID() *CommentUpsert {
	u.SetExcluded(comment.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommentUpsert) ClearUserID() *CommentUpsert {
	u.SetNull(comment.FieldUserID)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsert) SetParentID(v int) *CommentUpsert {
	u.Set(comment.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateParentID() *CommentUpsert {
	u.SetExcluded(comment.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CommentUpsert) ClearParentID() *CommentUpsert {
	u.SetNull(comment.FieldParentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CommentUpsertOne) UpdateNewValues() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(comment.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Comment.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CommentUpsertOne) Ignore() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertOne) DoNothing() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreate.OnConflict
// documentation for more info.
func (u *CommentUpsertOne) Update(set func(*CommentUpsert)) *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CommentUpsertOne) SetCreatedAt(v time.Time) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateCreatedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsertOne) SetUpdatedAt(v time.Time) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUpdatedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsertOne) SetDeletedAt(v time.Time) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateDeletedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommentUpsertOne) ClearDeletedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetContent sets the "content" field.
func (u *CommentUpsertOne) SetContent(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateContent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContent()
	})
}

// SetContentHTML sets the "content_html" field.
func (u *CommentUpsertOne) SetContentHTML(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetContentHTML(v)
	})
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateContentHTML() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContentHTML()
	})
}

// SetVotes sets the "votes" field.
func (u *CommentUpsertOne) SetVotes(v int64) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetVotes(v)
	})
}

// AddVotes adds v to the "votes" field.
func (u *CommentUpsertOne) AddVotes(v int64) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddVotes(v)
	})
}

// UpdateVotes sets the "votes" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateVotes() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateVotes()
	})
}

// SetPostID sets the "post_id" field.
func (u *CommentUpsertOne) SetPostID(v int) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetPostID(v)
	})
}

// UpdatePostID sets the "post_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdatePostID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdatePostID()
	})
}

// ClearPostID clears the value of the "post_id" field.
func (u *CommentUpsertOne) ClearPostID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearPostID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CommentUpsertOne) SetUserID(v int) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUserID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommentUpsertOne) ClearUserID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUserID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsertOne) SetParentID(v int) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateParentID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CommentUpsertOne) ClearParentID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *CommentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommentCreateBulk is the builder for creating many Comment entities in bulk.
type CommentCreateBulk struct {
	config
	builders []*CommentCreate
	conflict []sql.ConflictOption
}

// Save creates the Comment entities in the database.
func (ccb *CommentCreateBulk) Save(ctx context.Context) ([]*Comment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comment, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommentCreateBulk) SaveX(ctx context.Context) []*Comment {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ccb *CommentCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommentUpsertBulk {
	ccb.conflict = opts
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ccb *CommentCreateBulk) OnConflictColumns(columns ...string) *CommentUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// CommentUpsertBulk is the builder for "upsert"-ing
// a bulk of Comment nodes.
type CommentUpsertBulk struct {
	create *CommentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CommentUpsertBulk) UpdateNewValues() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(comment.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CommentUpsertBulk) Ignore() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertBulk) DoNothing() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreateBulk.OnConflict
// documentation for more info.
func (u *CommentUpsertBulk) Update(set func(*CommentUpsert)) *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CommentUpsertBulk) SetCreatedAt(v time.Time) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateCreatedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsertBulk) SetUpdatedAt(v time.Time) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUpdatedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsertBulk) SetDeletedAt(v time.Time) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateDeletedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommentUpsertBulk) ClearDeletedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetContent sets the "content" field.
func (u *CommentUpsertBulk) SetContent(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateContent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContent()
	})
}

// SetContentHTML sets the "content_html" field.
func (u *CommentUpsertBulk) SetContentHTML(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetContentHTML(v)
	})
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateContentHTML() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContentHTML()
	})
}

// SetVotes sets the "votes" field.
func (u *CommentUpsertBulk) SetVotes(v int64) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetVotes(v)
	})
}

// AddVotes adds v to the "votes" field.
func (u *CommentUpsertBulk) AddVotes(v int64) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddVotes(v)
	})
}

// UpdateVotes sets the "votes" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateVotes() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateVotes()
	})
}

// SetPostID sets the "post_id" field.
func (u *CommentUpsertBulk) SetPostID(v int) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetPostID(v)
	})
}

// UpdatePostID sets the "post_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdatePostID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdatePostID()
	})
}

// ClearPostID clears the value of the "post_id" field.
func (u *CommentUpsertBulk) ClearPostID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearPostID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CommentUpsertBulk) SetUserID(v int) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUserID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommentUpsertBulk) ClearUserID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUserID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsertBulk) SetParentID(v int) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateParentID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CommentUpsertBulk) ClearParentID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *CommentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CommentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
