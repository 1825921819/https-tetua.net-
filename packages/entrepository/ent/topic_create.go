// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/post"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/topic"
)

// TopicCreate is the builder for creating a Topic entity.
type TopicCreate struct {
	config
	mutation *TopicMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TopicCreate) SetCreatedAt(t time.Time) *TopicCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TopicCreate) SetNillableCreatedAt(t *time.Time) *TopicCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TopicCreate) SetUpdatedAt(t time.Time) *TopicCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TopicCreate) SetNillableUpdatedAt(t *time.Time) *TopicCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TopicCreate) SetDeletedAt(t time.Time) *TopicCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TopicCreate) SetNillableDeletedAt(t *time.Time) *TopicCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TopicCreate) SetName(s string) *TopicCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetSlug sets the "slug" field.
func (tc *TopicCreate) SetSlug(s string) *TopicCreate {
	tc.mutation.SetSlug(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TopicCreate) SetDescription(s string) *TopicCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TopicCreate) SetNillableDescription(s *string) *TopicCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetContent sets the "content" field.
func (tc *TopicCreate) SetContent(s string) *TopicCreate {
	tc.mutation.SetContent(s)
	return tc
}

// SetContentHTML sets the "content_html" field.
func (tc *TopicCreate) SetContentHTML(s string) *TopicCreate {
	tc.mutation.SetContentHTML(s)
	return tc
}

// SetParentID sets the "parent_id" field.
func (tc *TopicCreate) SetParentID(i int) *TopicCreate {
	tc.mutation.SetParentID(i)
	return tc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tc *TopicCreate) SetNillableParentID(i *int) *TopicCreate {
	if i != nil {
		tc.SetParentID(*i)
	}
	return tc
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (tc *TopicCreate) AddPostIDs(ids ...int) *TopicCreate {
	tc.mutation.AddPostIDs(ids...)
	return tc
}

// AddPosts adds the "posts" edges to the Post entity.
func (tc *TopicCreate) AddPosts(p ...*Post) *TopicCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddPostIDs(ids...)
}

// AddChildIDs adds the "children" edge to the Topic entity by IDs.
func (tc *TopicCreate) AddChildIDs(ids ...int) *TopicCreate {
	tc.mutation.AddChildIDs(ids...)
	return tc
}

// AddChildren adds the "children" edges to the Topic entity.
func (tc *TopicCreate) AddChildren(t ...*Topic) *TopicCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Topic entity.
func (tc *TopicCreate) SetParent(t *Topic) *TopicCreate {
	return tc.SetParentID(t.ID)
}

// Mutation returns the TopicMutation object of the builder.
func (tc *TopicCreate) Mutation() *TopicMutation {
	return tc.mutation
}

// Save creates the Topic in the database.
func (tc *TopicCreate) Save(ctx context.Context) (*Topic, error) {
	var (
		err  error
		node *Topic
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TopicCreate) SaveX(ctx context.Context) *Topic {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TopicCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TopicCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TopicCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := topic.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := topic.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TopicCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Topic.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Topic.updated_at"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Topic.name"`)}
	}
	if _, ok := tc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Topic.slug"`)}
	}
	if _, ok := tc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Topic.content"`)}
	}
	if _, ok := tc.mutation.ContentHTML(); !ok {
		return &ValidationError{Name: "content_html", err: errors.New(`ent: missing required field "Topic.content_html"`)}
	}
	return nil
}

func (tc *TopicCreate) sqlSave(ctx context.Context) (*Topic, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TopicCreate) createSpec() (*Topic, *sqlgraph.CreateSpec) {
	var (
		_node = &Topic{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: topic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: topic.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topic.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topic.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topic.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.Slug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldSlug,
		})
		_node.Slug = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := tc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := tc.mutation.ContentHTML(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldContentHTML,
		})
		_node.ContentHTML = value
	}
	if nodes := tc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   topic.PostsTable,
			Columns: topic.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.ChildrenTable,
			Columns: []string{topic.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.ParentTable,
			Columns: []string{topic.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Topic.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopicUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tc *TopicCreate) OnConflict(opts ...sql.ConflictOption) *TopicUpsertOne {
	tc.conflict = opts
	return &TopicUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tc *TopicCreate) OnConflictColumns(columns ...string) *TopicUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TopicUpsertOne{
		create: tc,
	}
}

type (
	// TopicUpsertOne is the builder for "upsert"-ing
	//  one Topic node.
	TopicUpsertOne struct {
		create *TopicCreate
	}

	// TopicUpsert is the "OnConflict" setter.
	TopicUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TopicUpsert) SetCreatedAt(v time.Time) *TopicUpsert {
	u.Set(topic.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopicUpsert) UpdateCreatedAt() *TopicUpsert {
	u.SetExcluded(topic.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopicUpsert) SetUpdatedAt(v time.Time) *TopicUpsert {
	u.Set(topic.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopicUpsert) UpdateUpdatedAt() *TopicUpsert {
	u.SetExcluded(topic.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopicUpsert) SetDeletedAt(v time.Time) *TopicUpsert {
	u.Set(topic.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopicUpsert) UpdateDeletedAt() *TopicUpsert {
	u.SetExcluded(topic.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TopicUpsert) ClearDeletedAt() *TopicUpsert {
	u.SetNull(topic.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *TopicUpsert) SetName(v string) *TopicUpsert {
	u.Set(topic.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TopicUpsert) UpdateName() *TopicUpsert {
	u.SetExcluded(topic.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *TopicUpsert) SetSlug(v string) *TopicUpsert {
	u.Set(topic.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *TopicUpsert) UpdateSlug() *TopicUpsert {
	u.SetExcluded(topic.FieldSlug)
	return u
}

// SetDescription sets the "description" field.
func (u *TopicUpsert) SetDescription(v string) *TopicUpsert {
	u.Set(topic.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TopicUpsert) UpdateDescription() *TopicUpsert {
	u.SetExcluded(topic.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *TopicUpsert) ClearDescription() *TopicUpsert {
	u.SetNull(topic.FieldDescription)
	return u
}

// SetContent sets the "content" field.
func (u *TopicUpsert) SetContent(v string) *TopicUpsert {
	u.Set(topic.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TopicUpsert) UpdateContent() *TopicUpsert {
	u.SetExcluded(topic.FieldContent)
	return u
}

// SetContentHTML sets the "content_html" field.
func (u *TopicUpsert) SetContentHTML(v string) *TopicUpsert {
	u.Set(topic.FieldContentHTML, v)
	return u
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *TopicUpsert) UpdateContentHTML() *TopicUpsert {
	u.SetExcluded(topic.FieldContentHTML)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *TopicUpsert) SetParentID(v int) *TopicUpsert {
	u.Set(topic.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *TopicUpsert) UpdateParentID() *TopicUpsert {
	u.SetExcluded(topic.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *TopicUpsert) ClearParentID() *TopicUpsert {
	u.SetNull(topic.FieldParentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *TopicUpsertOne) UpdateNewValues() *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(topic.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Topic.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TopicUpsertOne) Ignore() *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopicUpsertOne) DoNothing() *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopicCreate.OnConflict
// documentation for more info.
func (u *TopicUpsertOne) Update(set func(*TopicUpsert)) *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopicUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TopicUpsertOne) SetCreatedAt(v time.Time) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateCreatedAt() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopicUpsertOne) SetUpdatedAt(v time.Time) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateUpdatedAt() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopicUpsertOne) SetDeletedAt(v time.Time) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateDeletedAt() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TopicUpsertOne) ClearDeletedAt() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *TopicUpsertOne) SetName(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateName() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *TopicUpsertOne) SetSlug(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateSlug() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateSlug()
	})
}

// SetDescription sets the "description" field.
func (u *TopicUpsertOne) SetDescription(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateDescription() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TopicUpsertOne) ClearDescription() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.ClearDescription()
	})
}

// SetContent sets the "content" field.
func (u *TopicUpsertOne) SetContent(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateContent() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateContent()
	})
}

// SetContentHTML sets the "content_html" field.
func (u *TopicUpsertOne) SetContentHTML(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetContentHTML(v)
	})
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateContentHTML() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateContentHTML()
	})
}

// SetParentID sets the "parent_id" field.
func (u *TopicUpsertOne) SetParentID(v int) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateParentID() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *TopicUpsertOne) ClearParentID() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *TopicUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TopicCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopicUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TopicUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TopicUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TopicCreateBulk is the builder for creating many Topic entities in bulk.
type TopicCreateBulk struct {
	config
	builders []*TopicCreate
	conflict []sql.ConflictOption
}

// Save creates the Topic entities in the database.
func (tcb *TopicCreateBulk) Save(ctx context.Context) ([]*Topic, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Topic, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TopicCreateBulk) SaveX(ctx context.Context) []*Topic {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TopicCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TopicCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Topic.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopicUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tcb *TopicCreateBulk) OnConflict(opts ...sql.ConflictOption) *TopicUpsertBulk {
	tcb.conflict = opts
	return &TopicUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tcb *TopicCreateBulk) OnConflictColumns(columns ...string) *TopicUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TopicUpsertBulk{
		create: tcb,
	}
}

// TopicUpsertBulk is the builder for "upsert"-ing
// a bulk of Topic nodes.
type TopicUpsertBulk struct {
	create *TopicCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *TopicUpsertBulk) UpdateNewValues() *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(topic.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TopicUpsertBulk) Ignore() *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopicUpsertBulk) DoNothing() *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopicCreateBulk.OnConflict
// documentation for more info.
func (u *TopicUpsertBulk) Update(set func(*TopicUpsert)) *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopicUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TopicUpsertBulk) SetCreatedAt(v time.Time) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateCreatedAt() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopicUpsertBulk) SetUpdatedAt(v time.Time) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateUpdatedAt() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopicUpsertBulk) SetDeletedAt(v time.Time) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateDeletedAt() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TopicUpsertBulk) ClearDeletedAt() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *TopicUpsertBulk) SetName(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateName() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *TopicUpsertBulk) SetSlug(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateSlug() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateSlug()
	})
}

// SetDescription sets the "description" field.
func (u *TopicUpsertBulk) SetDescription(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateDescription() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TopicUpsertBulk) ClearDescription() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.ClearDescription()
	})
}

// SetContent sets the "content" field.
func (u *TopicUpsertBulk) SetContent(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateContent() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateContent()
	})
}

// SetContentHTML sets the "content_html" field.
func (u *TopicUpsertBulk) SetContentHTML(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetContentHTML(v)
	})
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateContentHTML() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateContentHTML()
	})
}

// SetParentID sets the "parent_id" field.
func (u *TopicUpsertBulk) SetParentID(v int) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateParentID() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *TopicUpsertBulk) ClearParentID() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *TopicUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TopicCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TopicCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopicUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
