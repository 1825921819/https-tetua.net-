// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/comment"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/file"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/post"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/predicate"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/topic"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/user"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PostUpdate) SetDeletedAt(t time.Time) *PostUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDeletedAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PostUpdate) ClearDeletedAt() *PostUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetName sets the "name" field.
func (pu *PostUpdate) SetName(s string) *PostUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetSlug sets the "slug" field.
func (pu *PostUpdate) SetSlug(s string) *PostUpdate {
	pu.mutation.SetSlug(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PostUpdate) SetDescription(s string) *PostUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDescription(s *string) *PostUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PostUpdate) ClearDescription() *PostUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetContent sets the "content" field.
func (pu *PostUpdate) SetContent(s string) *PostUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetContentHTML sets the "content_html" field.
func (pu *PostUpdate) SetContentHTML(s string) *PostUpdate {
	pu.mutation.SetContentHTML(s)
	return pu
}

// SetViewCount sets the "view_count" field.
func (pu *PostUpdate) SetViewCount(i int64) *PostUpdate {
	pu.mutation.ResetViewCount()
	pu.mutation.SetViewCount(i)
	return pu
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (pu *PostUpdate) SetNillableViewCount(i *int64) *PostUpdate {
	if i != nil {
		pu.SetViewCount(*i)
	}
	return pu
}

// AddViewCount adds i to the "view_count" field.
func (pu *PostUpdate) AddViewCount(i int64) *PostUpdate {
	pu.mutation.AddViewCount(i)
	return pu
}

// SetCommentCount sets the "comment_count" field.
func (pu *PostUpdate) SetCommentCount(i int64) *PostUpdate {
	pu.mutation.ResetCommentCount()
	pu.mutation.SetCommentCount(i)
	return pu
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCommentCount(i *int64) *PostUpdate {
	if i != nil {
		pu.SetCommentCount(*i)
	}
	return pu
}

// AddCommentCount adds i to the "comment_count" field.
func (pu *PostUpdate) AddCommentCount(i int64) *PostUpdate {
	pu.mutation.AddCommentCount(i)
	return pu
}

// SetRatingCount sets the "rating_count" field.
func (pu *PostUpdate) SetRatingCount(i int64) *PostUpdate {
	pu.mutation.ResetRatingCount()
	pu.mutation.SetRatingCount(i)
	return pu
}

// SetNillableRatingCount sets the "rating_count" field if the given value is not nil.
func (pu *PostUpdate) SetNillableRatingCount(i *int64) *PostUpdate {
	if i != nil {
		pu.SetRatingCount(*i)
	}
	return pu
}

// AddRatingCount adds i to the "rating_count" field.
func (pu *PostUpdate) AddRatingCount(i int64) *PostUpdate {
	pu.mutation.AddRatingCount(i)
	return pu
}

// ClearRatingCount clears the value of the "rating_count" field.
func (pu *PostUpdate) ClearRatingCount() *PostUpdate {
	pu.mutation.ClearRatingCount()
	return pu
}

// SetRatingTotal sets the "rating_total" field.
func (pu *PostUpdate) SetRatingTotal(i int64) *PostUpdate {
	pu.mutation.ResetRatingTotal()
	pu.mutation.SetRatingTotal(i)
	return pu
}

// SetNillableRatingTotal sets the "rating_total" field if the given value is not nil.
func (pu *PostUpdate) SetNillableRatingTotal(i *int64) *PostUpdate {
	if i != nil {
		pu.SetRatingTotal(*i)
	}
	return pu
}

// AddRatingTotal adds i to the "rating_total" field.
func (pu *PostUpdate) AddRatingTotal(i int64) *PostUpdate {
	pu.mutation.AddRatingTotal(i)
	return pu
}

// ClearRatingTotal clears the value of the "rating_total" field.
func (pu *PostUpdate) ClearRatingTotal() *PostUpdate {
	pu.mutation.ClearRatingTotal()
	return pu
}

// SetDraft sets the "draft" field.
func (pu *PostUpdate) SetDraft(b bool) *PostUpdate {
	pu.mutation.SetDraft(b)
	return pu
}

// SetNillableDraft sets the "draft" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDraft(b *bool) *PostUpdate {
	if b != nil {
		pu.SetDraft(*b)
	}
	return pu
}

// ClearDraft clears the value of the "draft" field.
func (pu *PostUpdate) ClearDraft() *PostUpdate {
	pu.mutation.ClearDraft()
	return pu
}

// SetApproved sets the "approved" field.
func (pu *PostUpdate) SetApproved(b bool) *PostUpdate {
	pu.mutation.SetApproved(b)
	return pu
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (pu *PostUpdate) SetNillableApproved(b *bool) *PostUpdate {
	if b != nil {
		pu.SetApproved(*b)
	}
	return pu
}

// ClearApproved clears the value of the "approved" field.
func (pu *PostUpdate) ClearApproved() *PostUpdate {
	pu.mutation.ClearApproved()
	return pu
}

// SetFeaturedImageID sets the "featured_image_id" field.
func (pu *PostUpdate) SetFeaturedImageID(i int) *PostUpdate {
	pu.mutation.SetFeaturedImageID(i)
	return pu
}

// SetNillableFeaturedImageID sets the "featured_image_id" field if the given value is not nil.
func (pu *PostUpdate) SetNillableFeaturedImageID(i *int) *PostUpdate {
	if i != nil {
		pu.SetFeaturedImageID(*i)
	}
	return pu
}

// ClearFeaturedImageID clears the value of the "featured_image_id" field.
func (pu *PostUpdate) ClearFeaturedImageID() *PostUpdate {
	pu.mutation.ClearFeaturedImageID()
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PostUpdate) SetUserID(i int) *PostUpdate {
	pu.mutation.SetUserID(i)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PostUpdate) SetNillableUserID(i *int) *PostUpdate {
	if i != nil {
		pu.SetUserID(*i)
	}
	return pu
}

// ClearUserID clears the value of the "user_id" field.
func (pu *PostUpdate) ClearUserID() *PostUpdate {
	pu.mutation.ClearUserID()
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PostUpdate) SetUser(u *User) *PostUpdate {
	return pu.SetUserID(u.ID)
}

// AddTopicIDs adds the "topics" edge to the Topic entity by IDs.
func (pu *PostUpdate) AddTopicIDs(ids ...int) *PostUpdate {
	pu.mutation.AddTopicIDs(ids...)
	return pu
}

// AddTopics adds the "topics" edges to the Topic entity.
func (pu *PostUpdate) AddTopics(t ...*Topic) *PostUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTopicIDs(ids...)
}

// SetFeaturedImage sets the "featured_image" edge to the File entity.
func (pu *PostUpdate) SetFeaturedImage(f *File) *PostUpdate {
	return pu.SetFeaturedImageID(f.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (pu *PostUpdate) AddCommentIDs(ids ...int) *PostUpdate {
	pu.mutation.AddCommentIDs(ids...)
	return pu
}

// AddComments adds the "comments" edges to the Comment entity.
func (pu *PostUpdate) AddComments(c ...*Comment) *PostUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCommentIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PostUpdate) ClearUser() *PostUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearTopics clears all "topics" edges to the Topic entity.
func (pu *PostUpdate) ClearTopics() *PostUpdate {
	pu.mutation.ClearTopics()
	return pu
}

// RemoveTopicIDs removes the "topics" edge to Topic entities by IDs.
func (pu *PostUpdate) RemoveTopicIDs(ids ...int) *PostUpdate {
	pu.mutation.RemoveTopicIDs(ids...)
	return pu
}

// RemoveTopics removes "topics" edges to Topic entities.
func (pu *PostUpdate) RemoveTopics(t ...*Topic) *PostUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTopicIDs(ids...)
}

// ClearFeaturedImage clears the "featured_image" edge to the File entity.
func (pu *PostUpdate) ClearFeaturedImage() *PostUpdate {
	pu.mutation.ClearFeaturedImage()
	return pu
}

// ClearComments clears all "comments" edges to the Comment entity.
func (pu *PostUpdate) ClearComments() *PostUpdate {
	pu.mutation.ClearComments()
	return pu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (pu *PostUpdate) RemoveCommentIDs(ids ...int) *PostUpdate {
	pu.mutation.RemoveCommentIDs(ids...)
	return pu
}

// RemoveComments removes "comments" edges to Comment entities.
func (pu *PostUpdate) RemoveComments(c ...*Comment) *PostUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldDeletedAt,
		})
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: post.FieldDeletedAt,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldName,
		})
	}
	if value, ok := pu.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldSlug,
		})
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldDescription,
		})
	}
	if pu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: post.FieldDescription,
		})
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldContent,
		})
	}
	if value, ok := pu.mutation.ContentHTML(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldContentHTML,
		})
	}
	if value, ok := pu.mutation.ViewCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldViewCount,
		})
	}
	if value, ok := pu.mutation.AddedViewCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldViewCount,
		})
	}
	if value, ok := pu.mutation.CommentCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldCommentCount,
		})
	}
	if value, ok := pu.mutation.AddedCommentCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldCommentCount,
		})
	}
	if value, ok := pu.mutation.RatingCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldRatingCount,
		})
	}
	if value, ok := pu.mutation.AddedRatingCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldRatingCount,
		})
	}
	if pu.mutation.RatingCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: post.FieldRatingCount,
		})
	}
	if value, ok := pu.mutation.RatingTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldRatingTotal,
		})
	}
	if value, ok := pu.mutation.AddedRatingTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldRatingTotal,
		})
	}
	if pu.mutation.RatingTotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: post.FieldRatingTotal,
		})
	}
	if value, ok := pu.mutation.Draft(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldDraft,
		})
	}
	if pu.mutation.DraftCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: post.FieldDraft,
		})
	}
	if value, ok := pu.mutation.Approved(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldApproved,
		})
	}
	if pu.mutation.ApprovedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: post.FieldApproved,
		})
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TopicsTable,
			Columns: post.TopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTopicsIDs(); len(nodes) > 0 && !pu.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TopicsTable,
			Columns: post.TopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TopicsTable,
			Columns: post.TopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FeaturedImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.FeaturedImageTable,
			Columns: []string{post.FeaturedImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FeaturedImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.FeaturedImageTable,
			Columns: []string{post.FeaturedImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !pu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PostUpdateOne) SetDeletedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDeletedAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PostUpdateOne) ClearDeletedAt() *PostUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetName sets the "name" field.
func (puo *PostUpdateOne) SetName(s string) *PostUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetSlug sets the "slug" field.
func (puo *PostUpdateOne) SetSlug(s string) *PostUpdateOne {
	puo.mutation.SetSlug(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *PostUpdateOne) SetDescription(s string) *PostUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDescription(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PostUpdateOne) ClearDescription() *PostUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetContent sets the "content" field.
func (puo *PostUpdateOne) SetContent(s string) *PostUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetContentHTML sets the "content_html" field.
func (puo *PostUpdateOne) SetContentHTML(s string) *PostUpdateOne {
	puo.mutation.SetContentHTML(s)
	return puo
}

// SetViewCount sets the "view_count" field.
func (puo *PostUpdateOne) SetViewCount(i int64) *PostUpdateOne {
	puo.mutation.ResetViewCount()
	puo.mutation.SetViewCount(i)
	return puo
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableViewCount(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetViewCount(*i)
	}
	return puo
}

// AddViewCount adds i to the "view_count" field.
func (puo *PostUpdateOne) AddViewCount(i int64) *PostUpdateOne {
	puo.mutation.AddViewCount(i)
	return puo
}

// SetCommentCount sets the "comment_count" field.
func (puo *PostUpdateOne) SetCommentCount(i int64) *PostUpdateOne {
	puo.mutation.ResetCommentCount()
	puo.mutation.SetCommentCount(i)
	return puo
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCommentCount(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetCommentCount(*i)
	}
	return puo
}

// AddCommentCount adds i to the "comment_count" field.
func (puo *PostUpdateOne) AddCommentCount(i int64) *PostUpdateOne {
	puo.mutation.AddCommentCount(i)
	return puo
}

// SetRatingCount sets the "rating_count" field.
func (puo *PostUpdateOne) SetRatingCount(i int64) *PostUpdateOne {
	puo.mutation.ResetRatingCount()
	puo.mutation.SetRatingCount(i)
	return puo
}

// SetNillableRatingCount sets the "rating_count" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableRatingCount(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetRatingCount(*i)
	}
	return puo
}

// AddRatingCount adds i to the "rating_count" field.
func (puo *PostUpdateOne) AddRatingCount(i int64) *PostUpdateOne {
	puo.mutation.AddRatingCount(i)
	return puo
}

// ClearRatingCount clears the value of the "rating_count" field.
func (puo *PostUpdateOne) ClearRatingCount() *PostUpdateOne {
	puo.mutation.ClearRatingCount()
	return puo
}

// SetRatingTotal sets the "rating_total" field.
func (puo *PostUpdateOne) SetRatingTotal(i int64) *PostUpdateOne {
	puo.mutation.ResetRatingTotal()
	puo.mutation.SetRatingTotal(i)
	return puo
}

// SetNillableRatingTotal sets the "rating_total" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableRatingTotal(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetRatingTotal(*i)
	}
	return puo
}

// AddRatingTotal adds i to the "rating_total" field.
func (puo *PostUpdateOne) AddRatingTotal(i int64) *PostUpdateOne {
	puo.mutation.AddRatingTotal(i)
	return puo
}

// ClearRatingTotal clears the value of the "rating_total" field.
func (puo *PostUpdateOne) ClearRatingTotal() *PostUpdateOne {
	puo.mutation.ClearRatingTotal()
	return puo
}

// SetDraft sets the "draft" field.
func (puo *PostUpdateOne) SetDraft(b bool) *PostUpdateOne {
	puo.mutation.SetDraft(b)
	return puo
}

// SetNillableDraft sets the "draft" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDraft(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetDraft(*b)
	}
	return puo
}

// ClearDraft clears the value of the "draft" field.
func (puo *PostUpdateOne) ClearDraft() *PostUpdateOne {
	puo.mutation.ClearDraft()
	return puo
}

// SetApproved sets the "approved" field.
func (puo *PostUpdateOne) SetApproved(b bool) *PostUpdateOne {
	puo.mutation.SetApproved(b)
	return puo
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableApproved(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetApproved(*b)
	}
	return puo
}

// ClearApproved clears the value of the "approved" field.
func (puo *PostUpdateOne) ClearApproved() *PostUpdateOne {
	puo.mutation.ClearApproved()
	return puo
}

// SetFeaturedImageID sets the "featured_image_id" field.
func (puo *PostUpdateOne) SetFeaturedImageID(i int) *PostUpdateOne {
	puo.mutation.SetFeaturedImageID(i)
	return puo
}

// SetNillableFeaturedImageID sets the "featured_image_id" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableFeaturedImageID(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetFeaturedImageID(*i)
	}
	return puo
}

// ClearFeaturedImageID clears the value of the "featured_image_id" field.
func (puo *PostUpdateOne) ClearFeaturedImageID() *PostUpdateOne {
	puo.mutation.ClearFeaturedImageID()
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *PostUpdateOne) SetUserID(i int) *PostUpdateOne {
	puo.mutation.SetUserID(i)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableUserID(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetUserID(*i)
	}
	return puo
}

// ClearUserID clears the value of the "user_id" field.
func (puo *PostUpdateOne) ClearUserID() *PostUpdateOne {
	puo.mutation.ClearUserID()
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PostUpdateOne) SetUser(u *User) *PostUpdateOne {
	return puo.SetUserID(u.ID)
}

// AddTopicIDs adds the "topics" edge to the Topic entity by IDs.
func (puo *PostUpdateOne) AddTopicIDs(ids ...int) *PostUpdateOne {
	puo.mutation.AddTopicIDs(ids...)
	return puo
}

// AddTopics adds the "topics" edges to the Topic entity.
func (puo *PostUpdateOne) AddTopics(t ...*Topic) *PostUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTopicIDs(ids...)
}

// SetFeaturedImage sets the "featured_image" edge to the File entity.
func (puo *PostUpdateOne) SetFeaturedImage(f *File) *PostUpdateOne {
	return puo.SetFeaturedImageID(f.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (puo *PostUpdateOne) AddCommentIDs(ids ...int) *PostUpdateOne {
	puo.mutation.AddCommentIDs(ids...)
	return puo
}

// AddComments adds the "comments" edges to the Comment entity.
func (puo *PostUpdateOne) AddComments(c ...*Comment) *PostUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCommentIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PostUpdateOne) ClearUser() *PostUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearTopics clears all "topics" edges to the Topic entity.
func (puo *PostUpdateOne) ClearTopics() *PostUpdateOne {
	puo.mutation.ClearTopics()
	return puo
}

// RemoveTopicIDs removes the "topics" edge to Topic entities by IDs.
func (puo *PostUpdateOne) RemoveTopicIDs(ids ...int) *PostUpdateOne {
	puo.mutation.RemoveTopicIDs(ids...)
	return puo
}

// RemoveTopics removes "topics" edges to Topic entities.
func (puo *PostUpdateOne) RemoveTopics(t ...*Topic) *PostUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTopicIDs(ids...)
}

// ClearFeaturedImage clears the "featured_image" edge to the File entity.
func (puo *PostUpdateOne) ClearFeaturedImage() *PostUpdateOne {
	puo.mutation.ClearFeaturedImage()
	return puo
}

// ClearComments clears all "comments" edges to the Comment entity.
func (puo *PostUpdateOne) ClearComments() *PostUpdateOne {
	puo.mutation.ClearComments()
	return puo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (puo *PostUpdateOne) RemoveCommentIDs(ids ...int) *PostUpdateOne {
	puo.mutation.RemoveCommentIDs(ids...)
	return puo
}

// RemoveComments removes "comments" edges to Comment entities.
func (puo *PostUpdateOne) RemoveComments(c ...*Comment) *PostUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCommentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	var (
		err  error
		node *Post
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldDeletedAt,
		})
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: post.FieldDeletedAt,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldName,
		})
	}
	if value, ok := puo.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldSlug,
		})
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldDescription,
		})
	}
	if puo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: post.FieldDescription,
		})
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldContent,
		})
	}
	if value, ok := puo.mutation.ContentHTML(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldContentHTML,
		})
	}
	if value, ok := puo.mutation.ViewCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldViewCount,
		})
	}
	if value, ok := puo.mutation.AddedViewCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldViewCount,
		})
	}
	if value, ok := puo.mutation.CommentCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldCommentCount,
		})
	}
	if value, ok := puo.mutation.AddedCommentCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldCommentCount,
		})
	}
	if value, ok := puo.mutation.RatingCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldRatingCount,
		})
	}
	if value, ok := puo.mutation.AddedRatingCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldRatingCount,
		})
	}
	if puo.mutation.RatingCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: post.FieldRatingCount,
		})
	}
	if value, ok := puo.mutation.RatingTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldRatingTotal,
		})
	}
	if value, ok := puo.mutation.AddedRatingTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: post.FieldRatingTotal,
		})
	}
	if puo.mutation.RatingTotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: post.FieldRatingTotal,
		})
	}
	if value, ok := puo.mutation.Draft(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldDraft,
		})
	}
	if puo.mutation.DraftCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: post.FieldDraft,
		})
	}
	if value, ok := puo.mutation.Approved(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: post.FieldApproved,
		})
	}
	if puo.mutation.ApprovedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: post.FieldApproved,
		})
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TopicsTable,
			Columns: post.TopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTopicsIDs(); len(nodes) > 0 && !puo.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TopicsTable,
			Columns: post.TopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.TopicsTable,
			Columns: post.TopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FeaturedImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.FeaturedImageTable,
			Columns: []string{post.FeaturedImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FeaturedImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.FeaturedImageTable,
			Columns: []string{post.FeaturedImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !puo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
