// Code generated by entc, DO NOT EDIT.

package post

import (
	"time"
)

const (
	// Label holds the string label denoting the post type in the database.
	Label = "post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldContentHTML holds the string denoting the content_html field in the database.
	FieldContentHTML = "content_html"
	// FieldViewCount holds the string denoting the view_count field in the database.
	FieldViewCount = "view_count"
	// FieldCommentCount holds the string denoting the comment_count field in the database.
	FieldCommentCount = "comment_count"
	// FieldRatingCount holds the string denoting the rating_count field in the database.
	FieldRatingCount = "rating_count"
	// FieldRatingTotal holds the string denoting the rating_total field in the database.
	FieldRatingTotal = "rating_total"
	// FieldDraft holds the string denoting the draft field in the database.
	FieldDraft = "draft"
	// FieldApproved holds the string denoting the approved field in the database.
	FieldApproved = "approved"
	// FieldFeaturedImageID holds the string denoting the featured_image_id field in the database.
	FieldFeaturedImageID = "featured_image_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTopics holds the string denoting the topics edge name in mutations.
	EdgeTopics = "topics"
	// EdgeFeaturedImage holds the string denoting the featured_image edge name in mutations.
	EdgeFeaturedImage = "featured_image"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// Table holds the table name of the post in the database.
	Table = "posts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "posts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// TopicsTable is the table that holds the topics relation/edge. The primary key declared below.
	TopicsTable = "topic_posts"
	// TopicsInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TopicsInverseTable = "topics"
	// FeaturedImageTable is the table that holds the featured_image relation/edge.
	FeaturedImageTable = "posts"
	// FeaturedImageInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FeaturedImageInverseTable = "files"
	// FeaturedImageColumn is the table column denoting the featured_image relation/edge.
	FeaturedImageColumn = "featured_image_id"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "post_id"
)

// Columns holds all SQL columns for post fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldSlug,
	FieldDescription,
	FieldContent,
	FieldContentHTML,
	FieldViewCount,
	FieldCommentCount,
	FieldRatingCount,
	FieldRatingTotal,
	FieldDraft,
	FieldApproved,
	FieldFeaturedImageID,
	FieldUserID,
}

var (
	// TopicsPrimaryKey and TopicsColumn2 are the table columns denoting the
	// primary key for the topics relation (M2M).
	TopicsPrimaryKey = []string{"topic_id", "post_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultViewCount holds the default value on creation for the "view_count" field.
	DefaultViewCount int64
	// DefaultCommentCount holds the default value on creation for the "comment_count" field.
	DefaultCommentCount int64
	// DefaultRatingCount holds the default value on creation for the "rating_count" field.
	DefaultRatingCount int64
	// DefaultRatingTotal holds the default value on creation for the "rating_total" field.
	DefaultRatingTotal int64
	// DefaultDraft holds the default value on creation for the "draft" field.
	DefaultDraft bool
	// DefaultApproved holds the default value on creation for the "approved" field.
	DefaultApproved bool
)
