// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/comment"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/file"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/post"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/role"
	"github.com/ngocphuongnb/tetua/packages/entrepository/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetDeletedAt sets the "deleted_at" field.
func (uc *UserCreate) SetDeletedAt(t time.Time) *UserCreate {
	uc.mutation.SetDeletedAt(t)
	return uc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetDisplayName sets the "display_name" field.
func (uc *UserCreate) SetDisplayName(s string) *UserCreate {
	uc.mutation.SetDisplayName(s)
	return uc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableDisplayName(s *string) *UserCreate {
	if s != nil {
		uc.SetDisplayName(*s)
	}
	return uc
}

// SetURL sets the "url" field.
func (uc *UserCreate) SetURL(s string) *UserCreate {
	uc.mutation.SetURL(s)
	return uc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (uc *UserCreate) SetNillableURL(s *string) *UserCreate {
	if s != nil {
		uc.SetURL(*s)
	}
	return uc
}

// SetProvider sets the "provider" field.
func (uc *UserCreate) SetProvider(s string) *UserCreate {
	uc.mutation.SetProvider(s)
	return uc
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (uc *UserCreate) SetNillableProvider(s *string) *UserCreate {
	if s != nil {
		uc.SetProvider(*s)
	}
	return uc
}

// SetProviderID sets the "provider_id" field.
func (uc *UserCreate) SetProviderID(s string) *UserCreate {
	uc.mutation.SetProviderID(s)
	return uc
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableProviderID(s *string) *UserCreate {
	if s != nil {
		uc.SetProviderID(*s)
	}
	return uc
}

// SetProviderUsername sets the "provider_username" field.
func (uc *UserCreate) SetProviderUsername(s string) *UserCreate {
	uc.mutation.SetProviderUsername(s)
	return uc
}

// SetNillableProviderUsername sets the "provider_username" field if the given value is not nil.
func (uc *UserCreate) SetNillableProviderUsername(s *string) *UserCreate {
	if s != nil {
		uc.SetProviderUsername(*s)
	}
	return uc
}

// SetProviderAvatar sets the "provider_avatar" field.
func (uc *UserCreate) SetProviderAvatar(s string) *UserCreate {
	uc.mutation.SetProviderAvatar(s)
	return uc
}

// SetNillableProviderAvatar sets the "provider_avatar" field if the given value is not nil.
func (uc *UserCreate) SetNillableProviderAvatar(s *string) *UserCreate {
	if s != nil {
		uc.SetProviderAvatar(*s)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetEmail(*s)
	}
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uc *UserCreate) SetNillablePassword(s *string) *UserCreate {
	if s != nil {
		uc.SetPassword(*s)
	}
	return uc
}

// SetBio sets the "bio" field.
func (uc *UserCreate) SetBio(s string) *UserCreate {
	uc.mutation.SetBio(s)
	return uc
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uc *UserCreate) SetNillableBio(s *string) *UserCreate {
	if s != nil {
		uc.SetBio(*s)
	}
	return uc
}

// SetBioHTML sets the "bio_html" field.
func (uc *UserCreate) SetBioHTML(s string) *UserCreate {
	uc.mutation.SetBioHTML(s)
	return uc
}

// SetNillableBioHTML sets the "bio_html" field if the given value is not nil.
func (uc *UserCreate) SetNillableBioHTML(s *string) *UserCreate {
	if s != nil {
		uc.SetBioHTML(*s)
	}
	return uc
}

// SetActive sets the "active" field.
func (uc *UserCreate) SetActive(b bool) *UserCreate {
	uc.mutation.SetActive(b)
	return uc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uc *UserCreate) SetNillableActive(b *bool) *UserCreate {
	if b != nil {
		uc.SetActive(*b)
	}
	return uc
}

// SetAvatarImageID sets the "avatar_image_id" field.
func (uc *UserCreate) SetAvatarImageID(i int) *UserCreate {
	uc.mutation.SetAvatarImageID(i)
	return uc
}

// SetNillableAvatarImageID sets the "avatar_image_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatarImageID(i *int) *UserCreate {
	if i != nil {
		uc.SetAvatarImageID(*i)
	}
	return uc
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (uc *UserCreate) AddPostIDs(ids ...int) *UserCreate {
	uc.mutation.AddPostIDs(ids...)
	return uc
}

// AddPosts adds the "posts" edges to the Post entity.
func (uc *UserCreate) AddPosts(p ...*Post) *UserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPostIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (uc *UserCreate) AddFileIDs(ids ...int) *UserCreate {
	uc.mutation.AddFileIDs(ids...)
	return uc
}

// AddFiles adds the "files" edges to the File entity.
func (uc *UserCreate) AddFiles(f ...*File) *UserCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uc.AddFileIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (uc *UserCreate) AddCommentIDs(ids ...int) *UserCreate {
	uc.mutation.AddCommentIDs(ids...)
	return uc
}

// AddComments adds the "comments" edges to the Comment entity.
func (uc *UserCreate) AddComments(c ...*Comment) *UserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCommentIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uc *UserCreate) AddRoleIDs(ids ...int) *UserCreate {
	uc.mutation.AddRoleIDs(ids...)
	return uc
}

// AddRoles adds the "roles" edges to the Role entity.
func (uc *UserCreate) AddRoles(r ...*Role) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRoleIDs(ids...)
}

// SetAvatarImage sets the "avatar_image" edge to the File entity.
func (uc *UserCreate) SetAvatarImage(f *File) *UserCreate {
	return uc.SetAvatarImageID(f.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uc.defaults()
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Active(); !ok {
		v := user.DefaultActive
		uc.mutation.SetActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if _, ok := uc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "User.active"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := uc.mutation.DisplayName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDisplayName,
		})
		_node.DisplayName = value
	}
	if value, ok := uc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := uc.mutation.Provider(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldProvider,
		})
		_node.Provider = value
	}
	if value, ok := uc.mutation.ProviderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldProviderID,
		})
		_node.ProviderID = value
	}
	if value, ok := uc.mutation.ProviderUsername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldProviderUsername,
		})
		_node.ProviderUsername = value
	}
	if value, ok := uc.mutation.ProviderAvatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldProviderAvatar,
		})
		_node.ProviderAvatar = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := uc.mutation.Bio(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldBio,
		})
		_node.Bio = value
	}
	if value, ok := uc.mutation.BioHTML(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldBioHTML,
		})
		_node.BioHTML = value
	}
	if value, ok := uc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldActive,
		})
		_node.Active = value
	}
	if nodes := uc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AvatarImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.AvatarImageTable,
			Columns: []string{user.AvatarImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AvatarImageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsert) SetCreatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreatedAt() *UserUpsert {
	u.SetExcluded(user.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsert) SetDeletedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateDeletedAt() *UserUpsert {
	u.SetExcluded(user.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsert) ClearDeletedAt() *UserUpsert {
	u.SetNull(user.FieldDeletedAt)
	return u
}

// SetUsername sets the "username" field.
func (u *UserUpsert) SetUsername(v string) *UserUpsert {
	u.Set(user.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsert) UpdateUsername() *UserUpsert {
	u.SetExcluded(user.FieldUsername)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *UserUpsert) SetDisplayName(v string) *UserUpsert {
	u.Set(user.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateDisplayName() *UserUpsert {
	u.SetExcluded(user.FieldDisplayName)
	return u
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *UserUpsert) ClearDisplayName() *UserUpsert {
	u.SetNull(user.FieldDisplayName)
	return u
}

// SetURL sets the "url" field.
func (u *UserUpsert) SetURL(v string) *UserUpsert {
	u.Set(user.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *UserUpsert) UpdateURL() *UserUpsert {
	u.SetExcluded(user.FieldURL)
	return u
}

// ClearURL clears the value of the "url" field.
func (u *UserUpsert) ClearURL() *UserUpsert {
	u.SetNull(user.FieldURL)
	return u
}

// SetProvider sets the "provider" field.
func (u *UserUpsert) SetProvider(v string) *UserUpsert {
	u.Set(user.FieldProvider, v)
	return u
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *UserUpsert) UpdateProvider() *UserUpsert {
	u.SetExcluded(user.FieldProvider)
	return u
}

// ClearProvider clears the value of the "provider" field.
func (u *UserUpsert) ClearProvider() *UserUpsert {
	u.SetNull(user.FieldProvider)
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *UserUpsert) SetProviderID(v string) *UserUpsert {
	u.Set(user.FieldProviderID, v)
	return u
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateProviderID() *UserUpsert {
	u.SetExcluded(user.FieldProviderID)
	return u
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *UserUpsert) ClearProviderID() *UserUpsert {
	u.SetNull(user.FieldProviderID)
	return u
}

// SetProviderUsername sets the "provider_username" field.
func (u *UserUpsert) SetProviderUsername(v string) *UserUpsert {
	u.Set(user.FieldProviderUsername, v)
	return u
}

// UpdateProviderUsername sets the "provider_username" field to the value that was provided on create.
func (u *UserUpsert) UpdateProviderUsername() *UserUpsert {
	u.SetExcluded(user.FieldProviderUsername)
	return u
}

// ClearProviderUsername clears the value of the "provider_username" field.
func (u *UserUpsert) ClearProviderUsername() *UserUpsert {
	u.SetNull(user.FieldProviderUsername)
	return u
}

// SetProviderAvatar sets the "provider_avatar" field.
func (u *UserUpsert) SetProviderAvatar(v string) *UserUpsert {
	u.Set(user.FieldProviderAvatar, v)
	return u
}

// UpdateProviderAvatar sets the "provider_avatar" field to the value that was provided on create.
func (u *UserUpsert) UpdateProviderAvatar() *UserUpsert {
	u.SetExcluded(user.FieldProviderAvatar)
	return u
}

// ClearProviderAvatar clears the value of the "provider_avatar" field.
func (u *UserUpsert) ClearProviderAvatar() *UserUpsert {
	u.SetNull(user.FieldProviderAvatar)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsert) ClearEmail() *UserUpsert {
	u.SetNull(user.FieldEmail)
	return u
}

// SetPassword sets the "password" field.
func (u *UserUpsert) SetPassword(v string) *UserUpsert {
	u.Set(user.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsert) UpdatePassword() *UserUpsert {
	u.SetExcluded(user.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *UserUpsert) ClearPassword() *UserUpsert {
	u.SetNull(user.FieldPassword)
	return u
}

// SetBio sets the "bio" field.
func (u *UserUpsert) SetBio(v string) *UserUpsert {
	u.Set(user.FieldBio, v)
	return u
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsert) UpdateBio() *UserUpsert {
	u.SetExcluded(user.FieldBio)
	return u
}

// ClearBio clears the value of the "bio" field.
func (u *UserUpsert) ClearBio() *UserUpsert {
	u.SetNull(user.FieldBio)
	return u
}

// SetBioHTML sets the "bio_html" field.
func (u *UserUpsert) SetBioHTML(v string) *UserUpsert {
	u.Set(user.FieldBioHTML, v)
	return u
}

// UpdateBioHTML sets the "bio_html" field to the value that was provided on create.
func (u *UserUpsert) UpdateBioHTML() *UserUpsert {
	u.SetExcluded(user.FieldBioHTML)
	return u
}

// ClearBioHTML clears the value of the "bio_html" field.
func (u *UserUpsert) ClearBioHTML() *UserUpsert {
	u.SetNull(user.FieldBioHTML)
	return u
}

// SetActive sets the "active" field.
func (u *UserUpsert) SetActive(v bool) *UserUpsert {
	u.Set(user.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *UserUpsert) UpdateActive() *UserUpsert {
	u.SetExcluded(user.FieldActive)
	return u
}

// SetAvatarImageID sets the "avatar_image_id" field.
func (u *UserUpsert) SetAvatarImageID(v int) *UserUpsert {
	u.Set(user.FieldAvatarImageID, v)
	return u
}

// UpdateAvatarImageID sets the "avatar_image_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatarImageID() *UserUpsert {
	u.SetExcluded(user.FieldAvatarImageID)
	return u
}

// ClearAvatarImageID clears the value of the "avatar_image_id" field.
func (u *UserUpsert) ClearAvatarImageID() *UserUpsert {
	u.SetNull(user.FieldAvatarImageID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.User.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertOne) SetCreatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertOne) SetDeletedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertOne) ClearDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertOne) SetUsername(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *UserUpsertOne) SetDisplayName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDisplayName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *UserUpsertOne) ClearDisplayName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDisplayName()
	})
}

// SetURL sets the "url" field.
func (u *UserUpsertOne) SetURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *UserUpsertOne) ClearURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearURL()
	})
}

// SetProvider sets the "provider" field.
func (u *UserUpsertOne) SetProvider(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateProvider() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateProvider()
	})
}

// ClearProvider clears the value of the "provider" field.
func (u *UserUpsertOne) ClearProvider() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearProvider()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *UserUpsertOne) SetProviderID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateProviderID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateProviderID()
	})
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *UserUpsertOne) ClearProviderID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearProviderID()
	})
}

// SetProviderUsername sets the "provider_username" field.
func (u *UserUpsertOne) SetProviderUsername(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetProviderUsername(v)
	})
}

// UpdateProviderUsername sets the "provider_username" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateProviderUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateProviderUsername()
	})
}

// ClearProviderUsername clears the value of the "provider_username" field.
func (u *UserUpsertOne) ClearProviderUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearProviderUsername()
	})
}

// SetProviderAvatar sets the "provider_avatar" field.
func (u *UserUpsertOne) SetProviderAvatar(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetProviderAvatar(v)
	})
}

// UpdateProviderAvatar sets the "provider_avatar" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateProviderAvatar() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateProviderAvatar()
	})
}

// ClearProviderAvatar clears the value of the "provider_avatar" field.
func (u *UserUpsertOne) ClearProviderAvatar() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearProviderAvatar()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertOne) ClearEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertOne) SetPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *UserUpsertOne) ClearPassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPassword()
	})
}

// SetBio sets the "bio" field.
func (u *UserUpsertOne) SetBio(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBio() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *UserUpsertOne) ClearBio() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBio()
	})
}

// SetBioHTML sets the "bio_html" field.
func (u *UserUpsertOne) SetBioHTML(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBioHTML(v)
	})
}

// UpdateBioHTML sets the "bio_html" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBioHTML() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBioHTML()
	})
}

// ClearBioHTML clears the value of the "bio_html" field.
func (u *UserUpsertOne) ClearBioHTML() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBioHTML()
	})
}

// SetActive sets the "active" field.
func (u *UserUpsertOne) SetActive(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateActive() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateActive()
	})
}

// SetAvatarImageID sets the "avatar_image_id" field.
func (u *UserUpsertOne) SetAvatarImageID(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarImageID(v)
	})
}

// UpdateAvatarImageID sets the "avatar_image_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatarImageID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarImageID()
	})
}

// ClearAvatarImageID clears the value of the "avatar_image_id" field.
func (u *UserUpsertOne) ClearAvatarImageID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatarImageID()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertBulk) SetCreatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertBulk) SetDeletedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertBulk) ClearDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertBulk) SetUsername(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *UserUpsertBulk) SetDisplayName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDisplayName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *UserUpsertBulk) ClearDisplayName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDisplayName()
	})
}

// SetURL sets the "url" field.
func (u *UserUpsertBulk) SetURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *UserUpsertBulk) ClearURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearURL()
	})
}

// SetProvider sets the "provider" field.
func (u *UserUpsertBulk) SetProvider(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateProvider() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateProvider()
	})
}

// ClearProvider clears the value of the "provider" field.
func (u *UserUpsertBulk) ClearProvider() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearProvider()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *UserUpsertBulk) SetProviderID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateProviderID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateProviderID()
	})
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *UserUpsertBulk) ClearProviderID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearProviderID()
	})
}

// SetProviderUsername sets the "provider_username" field.
func (u *UserUpsertBulk) SetProviderUsername(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetProviderUsername(v)
	})
}

// UpdateProviderUsername sets the "provider_username" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateProviderUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateProviderUsername()
	})
}

// ClearProviderUsername clears the value of the "provider_username" field.
func (u *UserUpsertBulk) ClearProviderUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearProviderUsername()
	})
}

// SetProviderAvatar sets the "provider_avatar" field.
func (u *UserUpsertBulk) SetProviderAvatar(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetProviderAvatar(v)
	})
}

// UpdateProviderAvatar sets the "provider_avatar" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateProviderAvatar() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateProviderAvatar()
	})
}

// ClearProviderAvatar clears the value of the "provider_avatar" field.
func (u *UserUpsertBulk) ClearProviderAvatar() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearProviderAvatar()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertBulk) ClearEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertBulk) SetPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *UserUpsertBulk) ClearPassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPassword()
	})
}

// SetBio sets the "bio" field.
func (u *UserUpsertBulk) SetBio(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBio() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *UserUpsertBulk) ClearBio() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBio()
	})
}

// SetBioHTML sets the "bio_html" field.
func (u *UserUpsertBulk) SetBioHTML(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBioHTML(v)
	})
}

// UpdateBioHTML sets the "bio_html" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBioHTML() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBioHTML()
	})
}

// ClearBioHTML clears the value of the "bio_html" field.
func (u *UserUpsertBulk) ClearBioHTML() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBioHTML()
	})
}

// SetActive sets the "active" field.
func (u *UserUpsertBulk) SetActive(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateActive() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateActive()
	})
}

// SetAvatarImageID sets the "avatar_image_id" field.
func (u *UserUpsertBulk) SetAvatarImageID(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarImageID(v)
	})
}

// UpdateAvatarImageID sets the "avatar_image_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatarImageID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarImageID()
	})
}

// ClearAvatarImageID clears the value of the "avatar_image_id" field.
func (u *UserUpsertBulk) ClearAvatarImageID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatarImageID()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
